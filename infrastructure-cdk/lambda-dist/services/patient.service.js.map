{"version":3,"file":"patient.service.js","sourceRoot":"","sources":["../../src/services/patient.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamoDBDocumentClient, PutCommand, GetCommand, UpdateCommand, QueryCommand, BatchGetCommand } from '@aws-sdk/lib-dynamodb';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Patient, PatientEntity, CreatePatientInput, UpdatePatientInput } from '../types/patient';\nimport { NotFoundError, ConflictError } from '../errors';\nimport { logger } from '../utils/logger';\n\nexport class PatientService {\n  constructor(\n    private dynamodb: DynamoDBDocumentClient,\n    private tableName: string\n  ) {}\n\n  /**\n   * Create a new patient record\n   */\n  async createPatient(input: CreatePatientInput, providerId: string): Promise<Patient> {\n    const patientId = uuidv4();\n    const timestamp = new Date().toISOString();\n\n    // Check if MRN already exists\n    const existingMrn = await this.getPatientByMrn(input.mrn);\n    if (existingMrn) {\n      throw new ConflictError('Patient with this MRN already exists');\n    }\n\n    const patient: Patient = {\n      ...input,\n      id: patientId,\n      createdAt: timestamp,\n      updatedAt: timestamp,\n      createdBy: providerId,\n      lastModifiedBy: providerId,\n    };\n\n    const entity: PatientEntity = {\n      ...patient,\n      pk: `PATIENT#${patientId}`,\n      sk: 'PROFILE',\n      gsi1pk: `MRN#${input.mrn}`,\n      gsi1sk: `PATIENT#${patientId}`,\n      gsi2pk: `PROVIDER#${providerId}`,\n      gsi2sk: `PATIENT#${patientId}#${timestamp}`,\n      entityType: 'PATIENT',\n    };\n\n    await this.dynamodb.send(\n      new PutCommand({\n        TableName: this.tableName,\n        Item: entity,\n        ConditionExpression: 'attribute_not_exists(pk)',\n      })\n    );\n\n    logger.info('Patient created', {\n      patientId,\n      mrn: input.mrn,\n      providerId,\n    });\n\n    return patient;\n  }\n\n  /**\n   * Get patient by ID\n   */\n  async getPatient(patientId: string): Promise<Patient | null> {\n    const result = await this.dynamodb.send(\n      new GetCommand({\n        TableName: this.tableName,\n        Key: {\n          pk: `PATIENT#${patientId}`,\n          sk: 'PROFILE',\n        },\n      })\n    );\n\n    if (!result.Item) {\n      return null;\n    }\n\n    const entity = result.Item as PatientEntity;\n    return this.entityToPatient(entity);\n  }\n\n  /**\n   * Get patient by MRN\n   */\n  async getPatientByMrn(mrn: string): Promise<Patient | null> {\n    const result = await this.dynamodb.send(\n      new QueryCommand({\n        TableName: this.tableName,\n        IndexName: 'gsi1',\n        KeyConditionExpression: 'gsi1pk = :pk',\n        ExpressionAttributeValues: {\n          ':pk': `MRN#${mrn}`,\n        },\n        Limit: 1,\n      })\n    );\n\n    if (!result.Items || result.Items.length === 0) {\n      return null;\n    }\n\n    const entity = result.Items[0] as PatientEntity;\n    return this.entityToPatient(entity);\n  }\n\n  /**\n   * Search patients by name, MRN, or date of birth\n   */\n  async searchPatients(\n    query: string,\n    limit = 20,\n    nextToken?: string\n  ): Promise<{ patients: Patient[]; nextToken?: string }> {\n    // This is a simplified search - in production, consider using OpenSearch\n    const params: any = {\n      TableName: this.tableName,\n      FilterExpression: 'contains(firstName, :query) OR contains(lastName, :query) OR contains(mrn, :query)',\n      ExpressionAttributeValues: {\n        ':query': query,\n      },\n      Limit: limit,\n    };\n\n    if (nextToken) {\n      params.ExclusiveStartKey = JSON.parse(Buffer.from(nextToken, 'base64').toString());\n    }\n\n    const result = await this.dynamodb.send(new QueryCommand(params));\n\n    const patients = (result.Items || [])\n      .filter((item: any) => item.entityType === 'PATIENT')\n      .map((item: any) => this.entityToPatient(item as PatientEntity));\n\n    const responseNextToken = result.LastEvaluatedKey\n      ? Buffer.from(JSON.stringify(result.LastEvaluatedKey)).toString('base64')\n      : undefined;\n\n    return { patients, nextToken: responseNextToken };\n  }\n\n  /**\n   * Get patients by provider\n   */\n  async getPatientsByProvider(\n    providerId: string,\n    limit = 50,\n    nextToken?: string\n  ): Promise<{ patients: Patient[]; nextToken?: string }> {\n    const params: any = {\n      TableName: this.tableName,\n      IndexName: 'gsi2',\n      KeyConditionExpression: 'gsi2pk = :pk',\n      ExpressionAttributeValues: {\n        ':pk': `PROVIDER#${providerId}`,\n      },\n      Limit: limit,\n      ScanIndexForward: false, // Most recent first\n    };\n\n    if (nextToken) {\n      params.ExclusiveStartKey = JSON.parse(Buffer.from(nextToken, 'base64').toString());\n    }\n\n    const result = await this.dynamodb.send(new QueryCommand(params));\n\n    const patients = (result.Items || [])\n      .filter((item: any) => item.entityType === 'PATIENT')\n      .map((item: any) => this.entityToPatient(item as PatientEntity));\n\n    const responseNextToken = result.LastEvaluatedKey\n      ? Buffer.from(JSON.stringify(result.LastEvaluatedKey)).toString('base64')\n      : undefined;\n\n    return { patients, nextToken: responseNextToken };\n  }\n\n  /**\n   * Update patient information\n   */\n  async updatePatient(\n    patientId: string,\n    updates: UpdatePatientInput,\n    providerId: string\n  ): Promise<Patient> {\n    const timestamp = new Date().toISOString();\n\n    // Build update expression\n    const updateExpressions: string[] = [];\n    const expressionAttributeNames: Record<string, string> = {};\n    const expressionAttributeValues: Record<string, any> = {};\n\n    Object.entries(updates).forEach(([key, value], index) => {\n      if (value !== undefined) {\n        updateExpressions.push(`#field${index} = :value${index}`);\n        expressionAttributeNames[`#field${index}`] = key;\n        expressionAttributeValues[`:value${index}`] = value;\n      }\n    });\n\n    // Always update timestamps\n    updateExpressions.push('#updatedAt = :updatedAt');\n    updateExpressions.push('#lastModifiedBy = :lastModifiedBy');\n    expressionAttributeNames['#updatedAt'] = 'updatedAt';\n    expressionAttributeNames['#lastModifiedBy'] = 'lastModifiedBy';\n    expressionAttributeValues[':updatedAt'] = timestamp;\n    expressionAttributeValues[':lastModifiedBy'] = providerId;\n\n    const result = await this.dynamodb.send(\n      new UpdateCommand({\n        TableName: this.tableName,\n        Key: {\n          pk: `PATIENT#${patientId}`,\n          sk: 'PROFILE',\n        },\n        UpdateExpression: `SET ${updateExpressions.join(', ')}`,\n        ExpressionAttributeNames: expressionAttributeNames,\n        ExpressionAttributeValues: expressionAttributeValues,\n        ConditionExpression: 'attribute_exists(pk)',\n        ReturnValues: 'ALL_NEW',\n      })\n    );\n\n    if (!result.Attributes) {\n      throw new NotFoundError('Patient');\n    }\n\n    logger.info('Patient updated', {\n      patientId,\n      providerId,\n      updatedFields: Object.keys(updates),\n    });\n\n    return this.entityToPatient(result.Attributes as PatientEntity);\n  }\n\n  /**\n   * Get multiple patients by IDs\n   */\n  async getPatientsByIds(patientIds: string[]): Promise<Patient[]> {\n    if (patientIds.length === 0) {\n      return [];\n    }\n\n    const keys = patientIds.map(id => ({\n      pk: `PATIENT#${id}`,\n      sk: 'PROFILE',\n    }));\n\n    const result = await this.dynamodb.send(\n      new BatchGetCommand({\n        RequestItems: {\n          [this.tableName]: {\n            Keys: keys,\n          },\n        },\n      })\n    );\n\n    const items = result.Responses?.[this.tableName] || [];\n    return items.map((item: any) => this.entityToPatient(item as PatientEntity));\n  }\n\n  /**\n   * Convert entity to patient model\n   */\n  private entityToPatient(entity: PatientEntity): Patient {\n    const { pk, sk, gsi1pk, gsi1sk, gsi2pk, gsi2sk, entityType, ...patient } = entity;\n    return patient as Patient;\n  }\n}"]}
{"version":3,"file":"encounter.service.js","sourceRoot":"","sources":["../../src/services/encounter.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamoDBDocumentClient, PutCommand, GetCommand, UpdateCommand, QueryCommand, BatchWriteCommand } from '@aws-sdk/lib-dynamodb';\nimport { v4 as uuidv4 } from 'uuid';\nimport { \n  Encounter, \n  EncounterEntity, \n  CreateEncounterInput, \n  UpdateEncounterInput,\n  CaptureConsentInput,\n  EncounterStatus,\n  UpdateEncounterStatusInput\n} from '../types/encounter';\nimport { NotFoundError, BusinessLogicError } from '../errors';\nimport { logger } from '../utils/logger';\nimport { metrics } from '../utils/metrics';\n\nexport class EncounterService {\n  constructor(\n    private dynamodb: DynamoDBDocumentClient,\n    private tableName: string\n  ) {}\n\n  /**\n   * Create a new encounter\n   */\n  async createEncounter(input: CreateEncounterInput, providerId: string): Promise<Encounter> {\n    const encounterId = uuidv4();\n    const timestamp = new Date().toISOString();\n    const scheduledAt = input.scheduledAt || timestamp; // Use provided time or current time\n    const scheduledDate = scheduledAt.split('T')[0]; // Extract date part\n\n    const encounter: Encounter = {\n      ...input,\n      id: encounterId,\n      patientId: input.patientId!, // We validate this exists in the handler\n      providerId,\n      scheduledAt,\n      status: EncounterStatus.SCHEDULED,\n      createdAt: timestamp,\n      updatedAt: timestamp,\n      createdBy: providerId,\n      lastModifiedBy: providerId,\n    };\n\n    const entity: EncounterEntity = {\n      ...encounter,\n      pk: `ENCOUNTER#${encounterId}`,\n      sk: 'METADATA',\n      gsi1pk: `PATIENT#${encounter.patientId}`,\n      gsi1sk: `ENCOUNTER#${scheduledAt}#${encounterId}`,\n      gsi2pk: `PROVIDER#${providerId}#DATE#${scheduledDate}`,\n      gsi2sk: `ENCOUNTER#${scheduledAt}#${encounterId}`,\n      gsi3pk: `DATE#${scheduledDate}`,\n      gsi3sk: `ENCOUNTER#${scheduledAt}#${encounterId}`,\n      entityType: 'ENCOUNTER',\n    };\n\n    await this.dynamodb.send(\n      new PutCommand({\n        TableName: this.tableName,\n        Item: entity,\n        ConditionExpression: 'attribute_not_exists(pk)',\n      })\n    );\n\n    logger.info('Encounter created', {\n      encounterId,\n      patientId: input.patientId,\n      providerId,\n      scheduledAt: scheduledAt,\n    });\n\n    metrics.count('EncounterCreated', 1, 'Count', { Type: input.type });\n\n    return encounter;\n  }\n\n  /**\n   * Get encounter by ID\n   */\n  async getEncounter(encounterId: string): Promise<Encounter | null> {\n    const result = await this.dynamodb.send(\n      new GetCommand({\n        TableName: this.tableName,\n        Key: {\n          pk: `ENCOUNTER#${encounterId}`,\n          sk: 'METADATA',\n        },\n      })\n    );\n\n    if (!result.Item) {\n      return null;\n    }\n\n    const entity = result.Item as EncounterEntity;\n    return this.entityToEncounter(entity);\n  }\n\n  /**\n   * Update encounter information\n   */\n  async updateEncounter(\n    encounterId: string,\n    updates: UpdateEncounterInput,\n    providerId: string\n  ): Promise<Encounter> {\n    const timestamp = new Date().toISOString();\n\n    // Build update expression\n    const updateExpressions: string[] = [];\n    const expressionAttributeNames: Record<string, string> = {};\n    const expressionAttributeValues: Record<string, any> = {};\n\n    Object.entries(updates).forEach(([key, value], index) => {\n      if (value !== undefined) {\n        updateExpressions.push(`#field${index} = :value${index}`);\n        expressionAttributeNames[`#field${index}`] = key;\n        expressionAttributeValues[`:value${index}`] = value;\n      }\n    });\n\n    // Always update timestamps\n    updateExpressions.push('#updatedAt = :updatedAt');\n    updateExpressions.push('#lastModifiedBy = :lastModifiedBy');\n    expressionAttributeNames['#updatedAt'] = 'updatedAt';\n    expressionAttributeNames['#lastModifiedBy'] = 'lastModifiedBy';\n    expressionAttributeValues[':updatedAt'] = timestamp;\n    expressionAttributeValues[':lastModifiedBy'] = providerId;\n\n    const result = await this.dynamodb.send(\n      new UpdateCommand({\n        TableName: this.tableName,\n        Key: {\n          pk: `ENCOUNTER#${encounterId}`,\n          sk: 'METADATA',\n        },\n        UpdateExpression: `SET ${updateExpressions.join(', ')}`,\n        ExpressionAttributeNames: expressionAttributeNames,\n        ExpressionAttributeValues: expressionAttributeValues,\n        ConditionExpression: 'attribute_exists(pk)',\n        ReturnValues: 'ALL_NEW',\n      })\n    );\n\n    if (!result.Attributes) {\n      throw new NotFoundError('Encounter');\n    }\n\n    logger.info('Encounter updated', {\n      encounterId,\n      providerId,\n      updatedFields: Object.keys(updates),\n    });\n\n    return this.entityToEncounter(result.Attributes as EncounterEntity);\n  }\n\n  /**\n   * Update encounter status with workflow validation\n   */\n  async updateEncounterStatus(\n    encounterId: string,\n    statusUpdate: UpdateEncounterStatusInput,\n    providerId: string\n  ): Promise<Encounter> {\n    const encounter = await this.getEncounter(encounterId);\n    if (!encounter) {\n      throw new NotFoundError('Encounter');\n    }\n\n    // Validate status transition\n    this.validateStatusTransition(encounter.status, statusUpdate.status);\n\n    const updates: any = {\n      status: statusUpdate.status,\n      notes: statusUpdate.notes,\n    };\n\n    // Set timestamps based on status\n    const timestamp = new Date().toISOString();\n    switch (statusUpdate.status) {\n      case EncounterStatus.IN_PROGRESS:\n        updates.startedAt = timestamp;\n        break;\n      case EncounterStatus.COMPLETED:\n        updates.completedAt = timestamp;\n        break;\n    }\n\n    const updatedEncounter = await this.updateEncounter(encounterId, updates, providerId);\n\n    metrics.count('EncounterStatusChanged', 1, 'Count', {\n      FromStatus: encounter.status,\n      ToStatus: statusUpdate.status,\n    });\n\n    return updatedEncounter;\n  }\n\n  /**\n   * Capture patient consent for encounter\n   */\n  async captureConsent(\n    encounterId: string,\n    consent: CaptureConsentInput,\n    patientId: string,\n    providerId: string\n  ): Promise<Encounter> {\n    const encounter = await this.getEncounter(encounterId);\n    if (!encounter) {\n      throw new NotFoundError('Encounter');\n    }\n\n    const timestamp = new Date().toISOString();\n    const newConsent = {\n      ...consent,\n      grantedAt: timestamp,\n      grantedBy: patientId,\n    };\n\n    const consents = encounter.consents || [];\n    // Remove any existing consent of the same type\n    const updatedConsents = consents.filter(c => c.type !== consent.type);\n    updatedConsents.push(newConsent);\n\n    const updatedEncounter = await this.updateEncounter(\n      encounterId,\n      { consents: updatedConsents },\n      providerId\n    );\n\n    logger.audit('CONSENT_CAPTURED', providerId, encounterId, {\n      consentType: consent.type,\n      granted: consent.granted,\n      patientId,\n    });\n\n    metrics.count('ConsentCaptured', 1, 'Count', {\n      Type: consent.type,\n      Granted: consent.granted.toString(),\n    });\n\n    return updatedEncounter;\n  }\n\n  /**\n   * Get daily encounter list for a provider\n   */\n  async getDailyEncounters(\n    providerId: string,\n    date: string,\n    status?: EncounterStatus,\n    limit = 50,\n    nextToken?: string\n  ): Promise<{ encounters: Encounter[]; nextToken?: string }> {\n    const params: any = {\n      TableName: this.tableName,\n      IndexName: 'gsi2',\n      KeyConditionExpression: 'gsi2pk = :pk',\n      ExpressionAttributeValues: {\n        ':pk': `PROVIDER#${providerId}#DATE#${date}`,\n      },\n      Limit: limit,\n    };\n\n    if (status) {\n      params.FilterExpression = '#status = :status';\n      params.ExpressionAttributeNames = { '#status': 'status' };\n      params.ExpressionAttributeValues[':status'] = status;\n    }\n\n    if (nextToken) {\n      params.ExclusiveStartKey = JSON.parse(Buffer.from(nextToken, 'base64').toString());\n    }\n\n    const result = await this.dynamodb.send(new QueryCommand(params));\n\n    const encounters = (result.Items || [])\n      .map((item: any) => this.entityToEncounter(item as EncounterEntity));\n\n    const responseNextToken = result.LastEvaluatedKey\n      ? Buffer.from(JSON.stringify(result.LastEvaluatedKey)).toString('base64')\n      : undefined;\n\n    return { encounters, nextToken: responseNextToken };\n  }\n\n  /**\n   * Get all encounters for a date (all providers)\n   */\n  async getEncountersByDate(\n    date: string,\n    limit = 100,\n    nextToken?: string\n  ): Promise<{ encounters: Encounter[]; nextToken?: string }> {\n    const params: any = {\n      TableName: this.tableName,\n      IndexName: 'gsi3',\n      KeyConditionExpression: 'gsi3pk = :pk',\n      ExpressionAttributeValues: {\n        ':pk': `DATE#${date}`,\n      },\n      Limit: limit,\n    };\n\n    if (nextToken) {\n      params.ExclusiveStartKey = JSON.parse(Buffer.from(nextToken, 'base64').toString());\n    }\n\n    const result = await this.dynamodb.send(new QueryCommand(params));\n\n    const encounters = (result.Items || [])\n      .map((item: any) => this.entityToEncounter(item as EncounterEntity));\n\n    const responseNextToken = result.LastEvaluatedKey\n      ? Buffer.from(JSON.stringify(result.LastEvaluatedKey)).toString('base64')\n      : undefined;\n\n    return { encounters, nextToken: responseNextToken };\n  }\n\n  /**\n   * Get patient encounters\n   */\n  async getPatientEncounters(\n    patientId: string,\n    limit = 20,\n    nextToken?: string\n  ): Promise<{ encounters: Encounter[]; nextToken?: string }> {\n    const params: any = {\n      TableName: this.tableName,\n      IndexName: 'gsi1',\n      KeyConditionExpression: 'gsi1pk = :pk',\n      ExpressionAttributeValues: {\n        ':pk': `PATIENT#${patientId}`,\n      },\n      Limit: limit,\n      ScanIndexForward: false, // Most recent first\n    };\n\n    if (nextToken) {\n      params.ExclusiveStartKey = JSON.parse(Buffer.from(nextToken, 'base64').toString());\n    }\n\n    const result = await this.dynamodb.send(new QueryCommand(params));\n\n    const encounters = (result.Items || [])\n      .filter((item: any) => item.entityType === 'ENCOUNTER')\n      .map((item: any) => this.entityToEncounter(item as EncounterEntity));\n\n    const responseNextToken = result.LastEvaluatedKey\n      ? Buffer.from(JSON.stringify(result.LastEvaluatedKey)).toString('base64')\n      : undefined;\n\n    return { encounters, nextToken: responseNextToken };\n  }\n\n  /**\n   * Add recording to encounter\n   */\n  async addRecording(\n    encounterId: string,\n    recording: {\n      startTime: string;\n      endTime: string;\n      duration: number;\n      s3Key: string;\n    },\n    providerId: string\n  ): Promise<Encounter> {\n    const encounter = await this.getEncounter(encounterId);\n    if (!encounter) {\n      throw new NotFoundError('Encounter');\n    }\n\n    const recordingWithId = {\n      ...recording,\n      id: uuidv4(),\n    };\n\n    const recordings = encounter.recordings || [];\n    recordings.push(recordingWithId);\n\n    return await this.updateEncounter(\n      encounterId,\n      { recordings },\n      providerId\n    );\n  }\n\n  /**\n   * Validate status transitions\n   */\n  private validateStatusTransition(currentStatus: EncounterStatus, newStatus: EncounterStatus): void {\n    const validTransitions: Record<EncounterStatus, EncounterStatus[]> = {\n      [EncounterStatus.SCHEDULED]: [\n        EncounterStatus.CHECKED_IN,\n        EncounterStatus.CANCELLED,\n        EncounterStatus.NO_SHOW,\n      ],\n      [EncounterStatus.CHECKED_IN]: [\n        EncounterStatus.IN_PROGRESS,\n        EncounterStatus.CANCELLED,\n        EncounterStatus.NO_SHOW,\n      ],\n      [EncounterStatus.IN_PROGRESS]: [\n        EncounterStatus.COMPLETED,\n        EncounterStatus.CANCELLED,\n      ],\n      [EncounterStatus.COMPLETED]: [], // Terminal state\n      [EncounterStatus.CANCELLED]: [], // Terminal state\n      [EncounterStatus.NO_SHOW]: [], // Terminal state\n    };\n\n    const allowedTransitions = validTransitions[currentStatus];\n    if (!allowedTransitions.includes(newStatus)) {\n      throw new BusinessLogicError(\n        `Invalid status transition from ${currentStatus} to ${newStatus}`,\n        400\n      );\n    }\n  }\n\n  /**\n   * Convert entity to encounter model\n   */\n  private entityToEncounter(entity: EncounterEntity): Encounter {\n    const { pk, sk, gsi1pk, gsi1sk, gsi2pk, gsi2sk, gsi3pk, gsi3sk, entityType, ...encounter } = entity;\n    return encounter as Encounter;\n  }\n}"]}
{"version":3,"file":"test-transcription.js","sourceRoot":"","sources":["../../../src/handlers/websocket/test-transcription.ts"],"names":[],"mappings":";;;AACA,uCAA6C;AAC7C,4EAA8F;AAE9F,MAAM,aAAa,GAAG,IAAI,6CAAoB,CAAC,EAAE,CAAC,CAAC;AAE5C,MAAM,OAAO,GAAG,KAAK,EAC1B,KAA2B,EACK,EAAE;IAClC,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;IAEpE,IAAI,CAAC;QACH,uBAAuB;QACvB,MAAM,cAAc,GAAG,MAAM,aAAa,CAAC,IAAI,CAC7C,IAAI,8CAAqB,CAAC;YACxB,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,+BAA+B;SAC9E,CAAC,CACH,CAAC;QAEF,MAAM,QAAQ,GAAG,IAAA,kBAAY,EAAC,cAAc,CAAC,YAAa,CAAC,CAAC;QAE5D,kCAAkC;QAClC,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEjD,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,SAAS,EAAE;YAC3E,KAAK,EAAE,gBAAgB;YACvB,SAAS,EAAE,IAAI;YACf,QAAQ,EAAE,OAAO;SAClB,CAAC,CAAC;QAEH,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,gBAAgB;gBACzB,MAAM,EAAE,QAAQ,CAAC,MAAM;aACxB,CAAC;SACH,CAAC;IACJ,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACnD,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,aAAa;gBACtB,KAAK,EAAE,KAAK,CAAC,OAAO;aACrB,CAAC;SACH,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAzCW,QAAA,OAAO,WAyClB","sourcesContent":["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport { createClient } from '@deepgram/sdk';\nimport { SecretsManagerClient, GetSecretValueCommand } from '@aws-sdk/client-secrets-manager';\n\nconst secretsClient = new SecretsManagerClient({});\n\nexport const handler = async (\n  event: APIGatewayProxyEvent\n): Promise<APIGatewayProxyResult> => {\n  console.log('[TestTranscription] Testing Deepgram with WebM audio');\n  \n  try {\n    // Get Deepgram API key\n    const secretResponse = await secretsClient.send(\n      new GetSecretValueCommand({\n        SecretId: process.env.DEEPGRAM_SECRET_NAME || 'ai-scribe-production-deepgram',\n      })\n    );\n    \n    const deepgram = createClient(secretResponse.SecretString!);\n    \n    // Test with a simple audio buffer\n    const testAudio = Buffer.from('test audio data');\n    \n    const response = await deepgram.listen.prerecorded.transcribeFile(testAudio, {\n      model: 'nova-2-general',\n      punctuate: true,\n      language: 'en-US',\n    });\n    \n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        message: 'Test completed',\n        result: response.result,\n      }),\n    };\n  } catch (error: any) {\n    console.error('[TestTranscription] Error:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: 'Test failed',\n        error: error.message,\n      }),\n    };\n  }\n};"]}
{"version":3,"file":"get-encounter.js","sourceRoot":"","sources":["../../../src/handlers/encounters/get-encounter.ts"],"names":[],"mappings":"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","sourcesContent":["import { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';\nimport { EncounterService } from '../../services/encounter.service';\nimport { PatientService } from '../../services/patient.service';\nimport { errorHandler } from '../../middleware/error-handler';\nimport { response } from '../../utils/response';\nimport { logger } from '../../utils/logger';\nimport { metrics } from '../../utils/metrics';\nimport { AuthorizationError, NotFoundError } from '../../errors';\nimport jwt from 'jsonwebtoken';\n\nconst dynamoClient = new DynamoDBClient({});\nconst dynamodb = DynamoDBDocumentClient.from(dynamoClient);\nconst encounterService = new EncounterService(dynamodb, process.env.TABLE_NAME!);\nconst patientService = new PatientService(dynamodb, process.env.TABLE_NAME!);\n\nconst getEncounterHandler = async (event: APIGatewayProxyEvent, context: Context) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n  const startTime = Date.now();\n\n  const encounterId = event.pathParameters?.encounterId;\n  if (!encounterId) {\n    return response.error('Encounter ID is required', 400);\n  }\n\n  // Get provider ID from token\n  const authHeader = event.headers.Authorization || event.headers.authorization;\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    throw new AuthorizationError('No authorization token provided');\n  }\n\n  const token = authHeader.split(' ')[1];\n  const decodedToken = jwt.decode(token) as any;\n  const providerId = decodedToken?.sub || decodedToken?.username;\n  \n  if (!providerId) {\n    throw new AuthorizationError('Invalid token: no provider ID');\n  }\n\n  logger.info('Getting encounter', { encounterId, providerId });\n\n  // Get encounter\n  const encounter = await encounterService.getEncounter(encounterId);\n  \n  if (!encounter) {\n    throw new NotFoundError('Encounter not found');\n  }\n\n  // Check if provider has access to this encounter\n  if (encounter.providerId !== providerId) {\n    logger.warn('Access denied to encounter', { \n      encounterId, \n      requestingProviderId: providerId, \n      encounterProviderId: encounter.providerId \n    });\n    throw new AuthorizationError('You do not have access to this encounter');\n  }\n\n  // Get patient details\n  const patient = await patientService.getPatient(encounter.patientId);\n  \n  // Add patient to encounter response\n  const encounterWithPatient = {\n    ...encounter,\n    patient,\n  };\n\n  // Track metrics\n  metrics.success('GetEncounter');\n  metrics.duration('GetEncounterDuration', startTime);\n\n  return response.success({\n    encounter: encounterWithPatient,\n  });\n};\n\nexport const handler = errorHandler(getEncounterHandler);"]}
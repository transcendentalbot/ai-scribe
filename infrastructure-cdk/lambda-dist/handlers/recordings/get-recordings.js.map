{"version":3,"file":"get-recordings.js","sourceRoot":"","sources":["../../../src/handlers/recordings/get-recordings.ts"],"names":[],"mappings":";;;AACA,kDAAgE;AAChE,8DAA0D;AAC1D,wDAA6E;AAC7E,wEAA6D;AAC7D,mDAAgD;AAChD,yCAAmD;AAEnD,MAAM,QAAQ,GAAG,IAAI,oBAAQ,CAAC,EAAE,CAAC,CAAC;AAClC,MAAM,YAAY,GAAG,IAAI,gCAAc,CAAC,EAAE,CAAC,CAAC;AAC5C,MAAM,SAAS,GAAG,qCAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAErD,MAAM,OAAO,GAAG,KAAK,EAC1B,KAA2B,EACK,EAAE;IAClC,IAAI,CAAC;QACH,uBAAuB;QACvB,MAAM,IAAI,GAAG,IAAA,sBAAgB,EAAC,KAAK,CAAC,CAAC;QAErC,MAAM,WAAW,GAAG,KAAK,CAAC,cAAc,EAAE,WAAW,CAAC;QACtD,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,mBAAQ,CAAC,KAAK,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC;QACzD,CAAC;QAED,6CAA6C;QAC7C,MAAM,eAAe,GAAG,MAAM,SAAS,CAAC,IAAI,CAC1C,IAAI,2BAAY,CAAC;YACf,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW;YAClC,sBAAsB,EAAE,uBAAuB;YAC/C,yBAAyB,EAAE;gBACzB,KAAK,EAAE,aAAa,WAAW,EAAE;gBACjC,KAAK,EAAE,UAAU;aAClB;SACF,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,KAAK,IAAI,eAAe,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjE,OAAO,mBAAQ,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,SAAS,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,UAAU,GAAG,SAAS,CAAC,UAAU,IAAI,EAAE,CAAC;QAE9C,6CAA6C;QAC7C,MAAM,kBAAkB,GAAG,MAAM,OAAO,CAAC,GAAG,CAC1C,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,SAAc,EAAE,EAAE;YACtC,IAAI,CAAC;gBACH,+CAA+C;gBAC/C,MAAM,YAAY,GAAG,MAAM,IAAA,mCAAY,EACrC,QAAQ,EACR,IAAI,4BAAgB,CAAC;oBACnB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAkB;oBACtC,GAAG,EAAE,SAAS,CAAC,KAAK;iBACrB,CAAC,EACF,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,oBAAoB;iBACzC,CAAC;gBAEF,OAAO;oBACL,GAAG,SAAS;oBACZ,GAAG,EAAE,YAAY;iBAClB,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,wCAAwC,SAAS,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;gBAC9E,OAAO;oBACL,GAAG,SAAS;oBACZ,GAAG,EAAE,IAAI;oBACT,KAAK,EAAE,iCAAiC;iBACzC,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CACH,CAAC;QAEF,OAAO,mBAAQ,CAAC,OAAO,CAAC;YACtB,WAAW;YACX,UAAU,EAAE,kBAAkB;SAC/B,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACrD,OAAO,mBAAQ,CAAC,KAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;IACtD,CAAC;AACH,CAAC,CAAC;AApEW,QAAA,OAAO,WAoElB","sourcesContent":["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport { S3Client, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient, QueryCommand } from '@aws-sdk/lib-dynamodb';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { response } from '../../utils/response';\nimport { getUserFromToken } from '../../utils/jwt';\n\nconst s3Client = new S3Client({});\nconst dynamoClient = new DynamoDBClient({});\nconst docClient = DynamoDBDocumentClient.from(dynamoClient);\n\nexport const handler = async (\n  event: APIGatewayProxyEvent\n): Promise<APIGatewayProxyResult> => {\n  try {\n    // Verify authorization\n    const user = getUserFromToken(event);\n\n    const encounterId = event.pathParameters?.encounterId;\n    if (!encounterId) {\n      return response.error('Encounter ID is required', 400);\n    }\n\n    // Query encounter metadata to get recordings\n    const encounterResult = await docClient.send(\n      new QueryCommand({\n        TableName: process.env.TABLE_NAME!,\n        KeyConditionExpression: 'pk = :pk AND sk = :sk',\n        ExpressionAttributeValues: {\n          ':pk': `ENCOUNTER#${encounterId}`,\n          ':sk': 'METADATA',\n        },\n      })\n    );\n\n    if (!encounterResult.Items || encounterResult.Items.length === 0) {\n      return response.error('Encounter not found', 404);\n    }\n\n    const encounter = encounterResult.Items[0];\n    const recordings = encounter.recordings || [];\n\n    // Generate presigned URLs for each recording\n    const recordingsWithUrls = await Promise.all(\n      recordings.map(async (recording: any) => {\n        try {\n          // Generate presigned URL for download/playback\n          const presignedUrl = await getSignedUrl(\n            s3Client,\n            new GetObjectCommand({\n              Bucket: process.env.AUDIO_BUCKET_NAME!,\n              Key: recording.s3Key,\n            }),\n            { expiresIn: 3600 } // 1 hour expiration\n          );\n\n          return {\n            ...recording,\n            url: presignedUrl,\n          };\n        } catch (error) {\n          console.error(`Failed to generate URL for recording ${recording.id}:`, error);\n          return {\n            ...recording,\n            url: null,\n            error: 'Failed to generate download URL',\n          };\n        }\n      })\n    );\n\n    return response.success({\n      encounterId,\n      recordings: recordingsWithUrls,\n    });\n  } catch (error) {\n    console.error('Error retrieving recordings:', error);\n    return response.error('Internal server error', 500);\n  }\n};"]}
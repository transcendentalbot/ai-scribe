{"version":3,"file":"refresh.js","sourceRoot":"","sources":["../../../src/handlers/auth/refresh.ts"],"names":[],"mappings":";;;AACA,2CAAsD;AACtD,iDAAqD;AACrD,mDAA0D;AAEnD,MAAM,OAAO,GAA2B,KAAK,EAAE,KAAK,EAAE,EAAE;IAC7D,IAAI,CAAC;QACH,kCAAkC;QAClC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;QAC5C,MAAM,aAAa,GAAG,yBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAErD,8BAA8B;QAC9B,IAAI,UAAU,CAAC;QACf,IAAI,CAAC;YACH,UAAU,GAAG,MAAM,wBAAc,CAAC,YAAY,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAC7E,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,KAAK,CAAC,IAAI,KAAK,wBAAwB,EAAE,CAAC;gBAC5C,MAAM,IAAI,mBAAQ,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;YACnD,CAAC;YACD,MAAM,KAAK,CAAC;QACd,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC;YACrC,MAAM,IAAI,mBAAQ,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;QAClD,CAAC;QAED,OAAO,mBAAQ,CAAC,OAAO,CAAC;YACtB,MAAM,EAAE;gBACN,WAAW,EAAE,UAAU,CAAC,oBAAoB,CAAC,WAAY;gBACzD,OAAO,EAAE,UAAU,CAAC,oBAAoB,CAAC,OAAQ;aAClD;SACF,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QAE7C,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAC9B,OAAO,mBAAQ,CAAC,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,KAAK,YAAY,mBAAQ,EAAE,CAAC;YAC9B,OAAO,mBAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACvE,CAAC;QAED,OAAO,mBAAQ,CAAC,KAAK,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;IACrD,CAAC;AACH,CAAC,CAAC;AAzCW,QAAA,OAAO,WAyClB","sourcesContent":["import { APIGatewayProxyHandler } from 'aws-lambda';\nimport { RefreshTokenSchema } from '../../types/auth';\nimport { cognitoService } from '../../utils/cognito';\nimport { response, AppError } from '../../utils/response';\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    // Parse and validate request body\n    const body = JSON.parse(event.body || '{}');\n    const validatedData = RefreshTokenSchema.parse(body);\n\n    // Refresh tokens with Cognito\n    let authResult;\n    try {\n      authResult = await cognitoService.refreshToken(validatedData.refreshToken);\n    } catch (error: any) {\n      if (error.name === 'NotAuthorizedException') {\n        throw new AppError('Invalid refresh token', 401);\n      }\n      throw error;\n    }\n\n    if (!authResult.AuthenticationResult) {\n      throw new AppError('Token refresh failed', 401);\n    }\n\n    return response.success({\n      tokens: {\n        accessToken: authResult.AuthenticationResult.AccessToken!,\n        idToken: authResult.AuthenticationResult.IdToken!,\n      },\n    });\n\n  } catch (error: any) {\n    console.error('Refresh token error:', error);\n\n    if (error.name === 'ZodError') {\n      return response.error('Validation failed', 400, error.errors);\n    }\n\n    if (error instanceof AppError) {\n      return response.error(error.message, error.statusCode, error.errors);\n    }\n\n    return response.error('Token refresh failed', 500);\n  }\n};"]}
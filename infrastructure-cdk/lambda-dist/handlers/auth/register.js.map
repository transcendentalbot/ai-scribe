{"version":3,"file":"register.js","sourceRoot":"","sources":["../../../src/handlers/auth/register.ts"],"names":[],"mappings":"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","sourcesContent":["import { APIGatewayProxyHandler } from 'aws-lambda';\nimport { v4 as uuidv4 } from 'uuid';\nimport { RegisterSchema } from '../../types/auth';\nimport { cognitoService } from '../../utils/cognito';\nimport { userService, dynamodb } from '../../utils/dynamodb';\nimport { response, AppError } from '../../utils/response';\nimport { PutCommand } from '@aws-sdk/lib-dynamodb';\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    // Parse and validate request body\n    const body = JSON.parse(event.body || '{}');\n    const validatedData = RegisterSchema.parse(body);\n\n    // Generate user ID\n    const userId = uuidv4();\n\n    // Register user in Cognito\n    try {\n      await cognitoService.signUp(validatedData.email, validatedData.password, {\n        email: validatedData.email,\n        given_name: validatedData.firstName,\n        family_name: validatedData.lastName,\n        phone_number: validatedData.phoneNumber || '',\n        'custom:user_id': userId,\n        'custom:license_number': validatedData.licenseNumber || '',\n        'custom:specialty': validatedData.specialty || '',\n        'custom:organization': validatedData.organization || '',\n      });\n    } catch (error: any) {\n      if (error.name === 'UsernameExistsException') {\n        throw new AppError('An account with this email already exists', 409);\n      }\n      throw error;\n    }\n\n    // Create user in DynamoDB\n    const user = await userService.createUser({\n      id: userId,\n      email: validatedData.email.toLowerCase(),\n      firstName: validatedData.firstName,\n      lastName: validatedData.lastName,\n      phoneNumber: validatedData.phoneNumber,\n      licenseNumber: validatedData.licenseNumber,\n      specialty: validatedData.specialty,\n      organization: validatedData.organization,\n    } as any);\n\n    // Create GSI entry for email lookup\n    await dynamodb.send(\n      new PutCommand({\n        TableName: process.env.TABLE_NAME!,\n        Item: {\n          pk: `EMAIL#${validatedData.email.toLowerCase()}`,\n          sk: `USER#${userId}`,\n          gsi1pk: `EMAIL#${validatedData.email.toLowerCase()}`,\n          gsi1sk: `USER#${userId}`,\n          id: userId,\n        },\n      })\n    );\n\n    return response.success({\n      message: 'Registration successful. Please check your email for verification code.',\n      userId: userId,\n    }, 201);\n\n  } catch (error: any) {\n    console.error('Registration error:', error);\n\n    if (error.name === 'ZodError') {\n      return response.error('Validation failed', 400, error.errors);\n    }\n\n    if (error instanceof AppError) {\n      return response.error(error.message, error.statusCode, error.errors);\n    }\n\n    return response.error('Registration failed', 500);\n  }\n};"]}
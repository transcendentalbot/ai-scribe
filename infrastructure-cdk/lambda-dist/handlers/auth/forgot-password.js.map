{"version":3,"file":"forgot-password.js","sourceRoot":"","sources":["../../../src/handlers/auth/forgot-password.ts"],"names":[],"mappings":";;;AACA,2CAAwD;AACxD,iDAAqD;AACrD,mDAA0D;AAEnD,MAAM,OAAO,GAA2B,KAAK,EAAE,KAAK,EAAE,EAAE;IAC7D,IAAI,CAAC;QACH,kCAAkC;QAClC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;QAC5C,MAAM,aAAa,GAAG,2BAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvD,gCAAgC;QAChC,IAAI,CAAC;YACH,MAAM,wBAAc,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC3D,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,KAAK,CAAC,IAAI,KAAK,uBAAuB,EAAE,CAAC;gBAC3C,kDAAkD;gBAClD,OAAO,mBAAQ,CAAC,OAAO,CAAC;oBACtB,OAAO,EAAE,+EAA+E;iBACzF,CAAC,CAAC;YACL,CAAC;YACD,MAAM,KAAK,CAAC;QACd,CAAC;QAED,OAAO,mBAAQ,CAAC,OAAO,CAAC;YACtB,OAAO,EAAE,+EAA+E;SACzF,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAE/C,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAC9B,OAAO,mBAAQ,CAAC,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,KAAK,YAAY,mBAAQ,EAAE,CAAC;YAC9B,OAAO,mBAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACvE,CAAC;QAED,OAAO,mBAAQ,CAAC,KAAK,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAC;IAC9D,CAAC;AACH,CAAC,CAAC;AApCW,QAAA,OAAO,WAoClB","sourcesContent":["import { APIGatewayProxyHandler } from 'aws-lambda';\nimport { ForgotPasswordSchema } from '../../types/auth';\nimport { cognitoService } from '../../utils/cognito';\nimport { response, AppError } from '../../utils/response';\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    // Parse and validate request body\n    const body = JSON.parse(event.body || '{}');\n    const validatedData = ForgotPasswordSchema.parse(body);\n\n    // Initiate forgot password flow\n    try {\n      await cognitoService.forgotPassword(validatedData.email);\n    } catch (error: any) {\n      if (error.name === 'UserNotFoundException') {\n        // Don't reveal if user exists or not for security\n        return response.success({\n          message: 'If an account exists with this email, you will receive a password reset code.',\n        });\n      }\n      throw error;\n    }\n\n    return response.success({\n      message: 'If an account exists with this email, you will receive a password reset code.',\n    });\n\n  } catch (error: any) {\n    console.error('Forgot password error:', error);\n\n    if (error.name === 'ZodError') {\n      return response.error('Validation failed', 400, error.errors);\n    }\n\n    if (error instanceof AppError) {\n      return response.error(error.message, error.statusCode, error.errors);\n    }\n\n    return response.error('Password reset request failed', 500);\n  }\n};"]}
{"version":3,"file":"confirm-forgot-password.js","sourceRoot":"","sources":["../../../src/handlers/auth/confirm-forgot-password.ts"],"names":[],"mappings":";;;AACA,2CAA+D;AAC/D,iDAAqD;AACrD,mDAA0D;AAEnD,MAAM,OAAO,GAA2B,KAAK,EAAE,KAAK,EAAE,EAAE;IAC7D,IAAI,CAAC;QACH,kCAAkC;QAClC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;QAC5C,MAAM,aAAa,GAAG,kCAA2B,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE9D,kDAAkD;QAClD,IAAI,CAAC;YACH,MAAM,wBAAc,CAAC,qBAAqB,CACxC,aAAa,CAAC,KAAK,EACnB,aAAa,CAAC,IAAI,EAClB,aAAa,CAAC,WAAW,CAC1B,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,KAAK,CAAC,IAAI,KAAK,uBAAuB,EAAE,CAAC;gBAC3C,MAAM,IAAI,mBAAQ,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAC;YACvD,CAAC;YACD,IAAI,KAAK,CAAC,IAAI,KAAK,sBAAsB,EAAE,CAAC;gBAC1C,MAAM,IAAI,mBAAQ,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAC;YAC3D,CAAC;YACD,IAAI,KAAK,CAAC,IAAI,KAAK,0BAA0B,EAAE,CAAC;gBAC9C,MAAM,IAAI,mBAAQ,CAAC,qCAAqC,EAAE,GAAG,CAAC,CAAC;YACjE,CAAC;YACD,IAAI,KAAK,CAAC,IAAI,KAAK,uBAAuB,EAAE,CAAC;gBAC3C,MAAM,IAAI,mBAAQ,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAC7C,CAAC;YACD,MAAM,KAAK,CAAC;QACd,CAAC;QAED,OAAO,mBAAQ,CAAC,OAAO,CAAC;YACtB,OAAO,EAAE,wEAAwE;SAClF,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QAEvD,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAC9B,OAAO,mBAAQ,CAAC,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,KAAK,YAAY,mBAAQ,EAAE,CAAC;YAC9B,OAAO,mBAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACvE,CAAC;QAED,OAAO,mBAAQ,CAAC,KAAK,CAAC,oCAAoC,EAAE,GAAG,CAAC,CAAC;IACnE,CAAC;AACH,CAAC,CAAC;AA9CW,QAAA,OAAO,WA8ClB","sourcesContent":["import { APIGatewayProxyHandler } from 'aws-lambda';\nimport { ConfirmForgotPasswordSchema } from '../../types/auth';\nimport { cognitoService } from '../../utils/cognito';\nimport { response, AppError } from '../../utils/response';\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    // Parse and validate request body\n    const body = JSON.parse(event.body || '{}');\n    const validatedData = ConfirmForgotPasswordSchema.parse(body);\n\n    // Confirm the new password with verification code\n    try {\n      await cognitoService.confirmForgotPassword(\n        validatedData.email,\n        validatedData.code,\n        validatedData.newPassword\n      );\n    } catch (error: any) {\n      if (error.name === 'CodeMismatchException') {\n        throw new AppError('Invalid verification code', 400);\n      }\n      if (error.name === 'ExpiredCodeException') {\n        throw new AppError('Verification code has expired', 400);\n      }\n      if (error.name === 'InvalidPasswordException') {\n        throw new AppError('Password does not meet requirements', 400);\n      }\n      if (error.name === 'UserNotFoundException') {\n        throw new AppError('Invalid request', 400);\n      }\n      throw error;\n    }\n\n    return response.success({\n      message: 'Password reset successfully. You can now login with your new password.',\n    });\n\n  } catch (error: any) {\n    console.error('Confirm forgot password error:', error);\n\n    if (error.name === 'ZodError') {\n      return response.error('Validation failed', 400, error.errors);\n    }\n\n    if (error instanceof AppError) {\n      return response.error(error.message, error.statusCode, error.errors);\n    }\n\n    return response.error('Password reset confirmation failed', 500);\n  }\n};"]}
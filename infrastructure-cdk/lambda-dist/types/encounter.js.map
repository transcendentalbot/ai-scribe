{"version":3,"file":"encounter.js","sourceRoot":"","sources":["../../src/types/encounter.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\n// Encounter status workflow\nexport enum EncounterStatus {\n  SCHEDULED = 'SCHEDULED',\n  CHECKED_IN = 'CHECKED_IN',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  CANCELLED = 'CANCELLED',\n  NO_SHOW = 'NO_SHOW',\n}\n\n// Consent types\nexport enum ConsentType {\n  RECORDING = 'RECORDING',\n  DATA_SHARING = 'DATA_SHARING',\n  TREATMENT = 'TREATMENT',\n}\n\n// Encounter schemas\nexport const EncounterSchema = z.object({\n  id: z.string().uuid(),\n  patientId: z.string().uuid(),\n  providerId: z.string().uuid(),\n  organizationId: z.string().optional(),\n  scheduledAt: z.string(), // ISO datetime\n  startedAt: z.string().optional(),\n  completedAt: z.string().optional(),\n  status: z.nativeEnum(EncounterStatus),\n  type: z.enum(['NEW_PATIENT', 'FOLLOW_UP', 'SICK_VISIT', 'WELLNESS_CHECK']),\n  chiefComplaint: z.string().optional(),\n  reasonForVisit: z.string().optional(),\n  location: z.object({\n    facilityName: z.string(),\n    roomNumber: z.string().optional(),\n    department: z.string().optional(),\n  }).optional(),\n  vitals: z.object({\n    bloodPressure: z.string().optional(),\n    heartRate: z.number().optional(),\n    temperature: z.number().optional(),\n    weight: z.number().optional(),\n    height: z.number().optional(),\n    respiratoryRate: z.number().optional(),\n    oxygenSaturation: z.number().optional(),\n  }).optional(),\n  consents: z.array(z.object({\n    type: z.nativeEnum(ConsentType),\n    granted: z.boolean(),\n    grantedAt: z.string(),\n    grantedBy: z.string(), // Patient or guardian ID\n    expiresAt: z.string().optional(),\n    notes: z.string().optional(),\n  })).optional(),\n  recordings: z.array(z.object({\n    id: z.string(),\n    startTime: z.string(),\n    endTime: z.string(),\n    duration: z.number(),\n    s3Key: z.string(),\n    transcriptionId: z.string().optional(),\n  })).optional(),\n  notes: z.string().optional(),\n  diagnoses: z.array(z.object({\n    code: z.string(),\n    description: z.string(),\n    type: z.enum(['PRIMARY', 'SECONDARY']),\n  })).optional(),\n  procedures: z.array(z.object({\n    code: z.string(),\n    description: z.string(),\n    performedAt: z.string(),\n  })).optional(),\n  medications: z.array(z.object({\n    name: z.string(),\n    dosage: z.string(),\n    frequency: z.string(),\n    startDate: z.string(),\n    endDate: z.string().optional(),\n  })).optional(),\n  followUpInstructions: z.string().optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  createdBy: z.string(),\n  lastModifiedBy: z.string(),\n});\n\nexport const CreateEncounterSchema = z.object({\n  patientId: z.string().uuid().optional(), // Optional for new patient creation\n  patientName: z.string().min(1, 'Patient name is required').optional(),\n  patientMRN: z.string().min(1, 'MRN is required').optional(),\n  patientBirthdate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Date must be in YYYY-MM-DD format').optional(),\n  type: z.enum(['NEW_PATIENT', 'FOLLOW_UP', 'SICK_VISIT', 'WELLNESS_CHECK']),\n  consentObtained: z.boolean().default(false),\n  scheduledAt: z.string().optional(), // Optional for immediate encounters\n});\n\nexport const UpdateEncounterSchema = CreateEncounterSchema.partial().extend({\n  status: z.nativeEnum(EncounterStatus).optional(),\n  vitals: EncounterSchema.shape.vitals.optional(),\n  notes: z.string().optional(),\n  diagnoses: EncounterSchema.shape.diagnoses.optional(),\n  procedures: EncounterSchema.shape.procedures.optional(),\n  medications: EncounterSchema.shape.medications.optional(),\n  followUpInstructions: z.string().optional(),\n  consents: EncounterSchema.shape.consents.optional(),\n  recordings: EncounterSchema.shape.recordings.optional(),\n});\n\nexport const CaptureConsentSchema = z.object({\n  type: z.nativeEnum(ConsentType),\n  granted: z.boolean(),\n  notes: z.string().optional(),\n  expiresAt: z.string().optional(),\n});\n\nexport const DailyEncounterListSchema = z.object({\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/).optional(), // Defaults to today\n  providerId: z.string().uuid().optional(), // If not provided, uses current user\n  status: z.nativeEnum(EncounterStatus).optional(),\n  limit: z.union([z.string().regex(/^\\d+$/).transform(Number), z.number()]).optional().default(50),\n  nextToken: z.string().optional(),\n});\n\nexport const UpdateEncounterStatusSchema = z.object({\n  status: z.nativeEnum(EncounterStatus),\n  notes: z.string().optional(),\n});\n\n// Types\nexport type Encounter = z.infer<typeof EncounterSchema>;\nexport type CreateEncounterInput = z.infer<typeof CreateEncounterSchema>;\nexport type UpdateEncounterInput = z.infer<typeof UpdateEncounterSchema>;\nexport type CaptureConsentInput = z.infer<typeof CaptureConsentSchema>;\nexport type DailyEncounterListInput = z.infer<typeof DailyEncounterListSchema>;\nexport type UpdateEncounterStatusInput = z.infer<typeof UpdateEncounterStatusSchema>;\n\n// DynamoDB Encounter entity\nexport interface EncounterEntity extends Encounter {\n  pk: string; // ENCOUNTER#<encounterId>\n  sk: string; // METADATA\n  gsi1pk?: string; // PATIENT#<patientId>\n  gsi1sk?: string; // ENCOUNTER#<timestamp>#<encounterId>\n  gsi2pk?: string; // PROVIDER#<providerId>#DATE#<date>\n  gsi2sk?: string; // ENCOUNTER#<timestamp>#<encounterId>\n  gsi3pk?: string; // DATE#<date>\n  gsi3sk?: string; // ENCOUNTER#<timestamp>#<encounterId>\n  entityType: 'ENCOUNTER';\n}"]}
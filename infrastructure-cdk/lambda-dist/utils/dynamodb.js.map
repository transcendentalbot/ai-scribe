{"version":3,"file":"dynamodb.js","sourceRoot":"","sources":["../../src/utils/dynamodb.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient, PutCommand, GetCommand, UpdateCommand, QueryCommand } from '@aws-sdk/lib-dynamodb';\nimport { User } from '../types/auth';\n\nconst client = new DynamoDBClient({\n  region: process.env.AWS_REGION || 'us-east-1',\n});\n\nexport const dynamodb = DynamoDBDocumentClient.from(client);\n\nconst TABLE_NAME = process.env.TABLE_NAME!;\n\nexport const userService = {\n  async createUser(user: Omit<User, 'pk' | 'sk'>) {\n    const item: User = {\n      ...user,\n      pk: `USER#${user.id}`,\n      sk: 'PROFILE',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      emailVerified: false,\n      mfaEnabled: false,\n    };\n\n    await dynamodb.send(\n      new PutCommand({\n        TableName: TABLE_NAME,\n        Item: item,\n        ConditionExpression: 'attribute_not_exists(pk)',\n      })\n    );\n\n    return item;\n  },\n\n  async getUser(userId: string): Promise<User | null> {\n    const result = await dynamodb.send(\n      new GetCommand({\n        TableName: TABLE_NAME,\n        Key: {\n          pk: `USER#${userId}`,\n          sk: 'PROFILE',\n        },\n      })\n    );\n\n    return result.Item as User | null;\n  },\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    const result = await dynamodb.send(\n      new QueryCommand({\n        TableName: TABLE_NAME,\n        IndexName: 'gsi1',\n        KeyConditionExpression: 'gsi1pk = :pk',\n        ExpressionAttributeValues: {\n          ':pk': `EMAIL#${email.toLowerCase()}`,\n        },\n        Limit: 1,\n      })\n    );\n\n    return result.Items?.[0] as User | null;\n  },\n\n  async updateUser(userId: string, updates: Partial<User>) {\n    const updateExpressions: string[] = [];\n    const expressionAttributeNames: Record<string, string> = {};\n    const expressionAttributeValues: Record<string, any> = {};\n\n    Object.entries(updates).forEach(([key, value], index) => {\n      if (key !== 'pk' && key !== 'sk' && key !== 'id') {\n        updateExpressions.push(`#field${index} = :value${index}`);\n        expressionAttributeNames[`#field${index}`] = key;\n        expressionAttributeValues[`:value${index}`] = value;\n      }\n    });\n\n    updateExpressions.push('#updatedAt = :updatedAt');\n    expressionAttributeNames['#updatedAt'] = 'updatedAt';\n    expressionAttributeValues[':updatedAt'] = new Date().toISOString();\n\n    const result = await dynamodb.send(\n      new UpdateCommand({\n        TableName: TABLE_NAME,\n        Key: {\n          pk: `USER#${userId}`,\n          sk: 'PROFILE',\n        },\n        UpdateExpression: `SET ${updateExpressions.join(', ')}`,\n        ExpressionAttributeNames: expressionAttributeNames,\n        ExpressionAttributeValues: expressionAttributeValues,\n        ReturnValues: 'ALL_NEW',\n      })\n    );\n\n    return result.Attributes as User;\n  },\n\n  async updateLastLogin(userId: string) {\n    return this.updateUser(userId, {\n      lastLoginAt: new Date().toISOString(),\n    });\n  },\n};"]}
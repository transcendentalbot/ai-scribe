{"version":3,"file":"jwt.js","sourceRoot":"","sources":["../../src/utils/jwt.ts"],"names":[],"mappings":";;AAmBA,8BAaC;AAKD,4CAwBC;AAKD,wDAGC;AApED,uEAA+D;AAC/D,sCAA+C;AAc/C;;GAEG;AACH,SAAgB,SAAS,CAAC,KAAa;IACrC,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAED,mCAAmC;QACnC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvE,OAAO,OAAO,CAAC;IACjB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,2BAAkB,CAAC,mBAAmB,CAAC,CAAC;IACpD,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,gBAAgB,CAAC,KAA2B;IAM1D,MAAM,KAAK,GAAG,IAAA,gCAAY,EAAC,KAAK,CAAC,CAAC;IAClC,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IAEjC,uFAAuF;IACvF,MAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC;QAC7B,OAAO,CAAC,gBAAgB,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC;IAE3B,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,IAAI,2BAAkB,CAAC,4BAA4B,CAAC,CAAC;IAC7D,CAAC;IAED,OAAO;QACL,MAAM;QACN,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,SAAS,EAAE,OAAO,CAAC,UAAU;QAC7B,QAAQ,EAAE,OAAO,CAAC,WAAW;KAC9B,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAgB,sBAAsB,CAAC,KAA2B;IAChE,MAAM,EAAE,MAAM,EAAE,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC3C,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { APIGatewayProxyEvent } from 'aws-lambda';\nimport { getAuthToken } from '../middleware/request-validator';\nimport { AuthorizationError } from '../errors';\n\ninterface JWTPayload {\n  sub: string;\n  email?: string;\n  given_name?: string;\n  family_name?: string;\n  'cognito:username'?: string;\n  'custom:provider_id'?: string;\n  'custom:user_id'?: string;\n  exp?: number;\n  iat?: number;\n}\n\n/**\n * Decodes a JWT token without verification (for use after API Gateway has already verified it)\n */\nexport function decodeJWT(token: string): JWTPayload {\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      throw new Error('Invalid JWT format');\n    }\n    \n    // Decode the payload (second part)\n    const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());\n    return payload;\n  } catch (error) {\n    throw new AuthorizationError('Invalid JWT token');\n  }\n}\n\n/**\n * Extracts user information from the request's JWT token\n */\nexport function getUserFromToken(event: APIGatewayProxyEvent): {\n  userId: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n} {\n  const token = getAuthToken(event);\n  const payload = decodeJWT(token);\n  \n  // Try different fields for user ID (handle both custom:provider_id and custom:user_id)\n  const userId = payload['custom:provider_id'] || \n                 payload['custom:user_id'] || \n                 payload.sub;\n  \n  if (!userId) {\n    throw new AuthorizationError('User ID not found in token');\n  }\n  \n  return {\n    userId,\n    email: payload.email,\n    firstName: payload.given_name,\n    lastName: payload.family_name,\n  };\n}\n\n/**\n * Gets the provider ID from the token (for backwards compatibility)\n */\nexport function getProviderIdFromToken(event: APIGatewayProxyEvent): string {\n  const { userId } = getUserFromToken(event);\n  return userId;\n}"]}
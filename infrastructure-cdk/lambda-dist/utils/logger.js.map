{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/utils/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Structured logging utility for Lambda functions\n * Outputs JSON formatted logs for CloudWatch and monitoring\n */\n\nexport enum LogLevel {\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n}\n\ninterface LogContext {\n  [key: string]: any;\n}\n\nclass Logger {\n  private serviceName: string;\n  private environment: string;\n\n  constructor() {\n    this.serviceName = process.env.SERVICE_NAME || 'ai-scribe';\n    this.environment = process.env.ENVIRONMENT || 'dev';\n  }\n\n  private log(level: LogLevel, message: string, context?: LogContext): void {\n    const timestamp = new Date().toISOString();\n    const logEntry = {\n      timestamp,\n      level,\n      service: this.serviceName,\n      environment: this.environment,\n      message,\n      ...context,\n    };\n\n    // In Lambda, console.log outputs to CloudWatch\n    console.log(JSON.stringify(logEntry));\n  }\n\n  debug(message: string, context?: LogContext): void {\n    if (process.env.LOG_LEVEL === 'DEBUG') {\n      this.log(LogLevel.DEBUG, message, context);\n    }\n  }\n\n  info(message: string, context?: LogContext): void {\n    this.log(LogLevel.INFO, message, context);\n  }\n\n  warn(message: string, context?: LogContext): void {\n    this.log(LogLevel.WARN, message, context);\n  }\n\n  error(message: string, context?: LogContext): void {\n    this.log(LogLevel.ERROR, message, context);\n  }\n\n  /**\n   * Log metrics that can be parsed by CloudWatch Insights\n   */\n  metric(name: string, value: number, unit: string, dimensions?: Record<string, string>): void {\n    const metric = {\n      _aws: {\n        Timestamp: Date.now(),\n        CloudWatchMetrics: [{\n          Namespace: `${this.serviceName}/${this.environment}`,\n          Dimensions: dimensions ? [Object.keys(dimensions)] : [],\n          Metrics: [{\n            Name: name,\n            Unit: unit,\n          }],\n        }],\n      },\n      [name]: value,\n      ...dimensions,\n    };\n\n    console.log(JSON.stringify(metric));\n  }\n\n  /**\n   * Log performance metrics\n   */\n  performance(operation: string, duration: number, metadata?: LogContext): void {\n    this.info('Performance metric', {\n      operation,\n      duration,\n      ...metadata,\n    });\n\n    // Also emit as CloudWatch metric\n    this.metric('OperationDuration', duration, 'Milliseconds', {\n      Operation: operation,\n    });\n  }\n\n  /**\n   * Log audit events for HIPAA compliance\n   */\n  audit(action: string, userId: string, resourceId: string, metadata?: LogContext): void {\n    this.info('Audit event', {\n      auditType: 'PHI_ACCESS',\n      action,\n      userId,\n      resourceId,\n      timestamp: new Date().toISOString(),\n      ...metadata,\n    });\n  }\n}\n\nexport const logger = new Logger();"]}
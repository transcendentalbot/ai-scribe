{"version":3,"file":"metrics.js","sourceRoot":"","sources":["../../src/utils/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from './logger';\n\n/**\n * CloudWatch metrics helper for monitoring Lambda performance and business metrics\n */\nexport class Metrics {\n  private namespace: string;\n\n  constructor(namespace?: string) {\n    this.namespace = namespace || `AIScribe/${process.env.ENVIRONMENT || 'dev'}`;\n  }\n\n  /**\n   * Record a count metric\n   */\n  count(metricName: string, value = 1, unit = 'Count', dimensions?: Record<string, string>): void {\n    logger.metric(metricName, value, unit, dimensions);\n  }\n\n  /**\n   * Record a duration metric in milliseconds\n   */\n  duration(metricName: string, startTime: number, dimensions?: Record<string, string>): void {\n    const duration = Date.now() - startTime;\n    logger.metric(metricName, duration, 'Milliseconds', dimensions);\n  }\n\n  /**\n   * Record a gauge metric (e.g., current value)\n   */\n  gauge(metricName: string, value: number, unit = 'None', dimensions?: Record<string, string>): void {\n    logger.metric(metricName, value, unit, dimensions);\n  }\n\n  /**\n   * Record success/failure metrics\n   */\n  success(operation: string, dimensions?: Record<string, string>): void {\n    this.count(`${operation}.Success`, 1, 'Count', dimensions);\n  }\n\n  failure(operation: string, errorType: string, dimensions?: Record<string, string>): void {\n    this.count(`${operation}.Failure`, 1, 'Count', { ...dimensions, ErrorType: errorType });\n  }\n\n  /**\n   * Record API endpoint metrics\n   */\n  apiCall(endpoint: string, method: string, statusCode: number, duration: number): void {\n    const dimensions = {\n      Endpoint: endpoint,\n      Method: method,\n      StatusCode: statusCode.toString(),\n    };\n\n    this.count('APICall', 1, 'Count', dimensions);\n    this.duration('APICallDuration', Date.now() - duration, dimensions);\n\n    if (statusCode >= 400) {\n      this.count('APIError', 1, 'Count', dimensions);\n    }\n  }\n\n  /**\n   * Record authentication metrics\n   */\n  authAttempt(success: boolean, method: string, reason?: string): void {\n    const metricName = success ? 'AuthSuccess' : 'AuthFailure';\n    const dimensions: Record<string, string> = { Method: method };\n    \n    if (reason) {\n      dimensions.Reason = reason;\n    }\n\n    this.count(metricName, 1, 'Count', dimensions);\n  }\n\n  /**\n   * Record PHI access for compliance\n   */\n  phiAccess(userId: string, resourceType: string, action: string): void {\n    this.count('PHIAccess', 1, 'Count', {\n      UserId: userId,\n      ResourceType: resourceType,\n      Action: action,\n    });\n  }\n\n  /**\n   * Record transcription metrics\n   */\n  transcription(duration: number, wordCount: number, success: boolean): void {\n    if (success) {\n      this.duration('TranscriptionDuration', Date.now() - duration);\n      this.gauge('TranscriptionWordCount', wordCount, 'Count');\n      this.count('TranscriptionSuccess');\n    } else {\n      this.count('TranscriptionFailure');\n    }\n  }\n}\n\nexport const metrics = new Metrics();"]}
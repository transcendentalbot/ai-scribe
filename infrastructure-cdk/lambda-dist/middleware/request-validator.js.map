{"version":3,"file":"request-validator.js","sourceRoot":"","sources":["../../src/middleware/request-validator.ts"],"names":[],"mappings":";;AAOA,oCAUC;AAKD,kDAMC;AAKD,gDAMC;AAKD,oCAkBC;AAKD,kDAMC;AAvED,sCAA4C;AAE5C;;GAEG;AACH,SAAgB,YAAY,CAAI,KAA2B,EAAE,MAAoB;IAC/E,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,IAAI,KAAK,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YACjC,MAAM,IAAI,wBAAe,CAAC,8BAA8B,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,KAAK,CAAC,CAAC,iDAAiD;IAChE,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CAAI,KAA2B,EAAE,MAAoB;IACtF,IAAI,CAAC;QACH,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,KAAK,CAAC,CAAC,iDAAiD;IAChE,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,kBAAkB,CAAI,KAA2B,EAAE,MAAoB;IACrF,IAAI,CAAC;QACH,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC;IAClD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,KAAK,CAAC,CAAC,iDAAiD;IAChE,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,YAAY,CAAC,KAA2B;IACtD,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC;IAE9E,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,wBAAe,CAAC,iCAAiC,CAAC,CAAC;IAC/D,CAAC;IAED,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,wBAAe,CAAC,qCAAqC,CAAC,CAAC;IACnE,CAAC;IAED,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAEtC,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,IAAI,wBAAe,CAAC,2BAA2B,CAAC,CAAC;IACzD,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CAAC,KAA2B,EAAE,YAAoB;IACnF,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAEnF,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;QACxD,MAAM,IAAI,wBAAe,CAAC,wBAAwB,YAAY,EAAE,CAAC,CAAC;IACpE,CAAC;AACH,CAAC","sourcesContent":["import { APIGatewayProxyEvent } from 'aws-lambda';\nimport { ZodSchema } from 'zod';\nimport { ValidationError } from '../errors';\n\n/**\n * Validates request body against a Zod schema\n */\nexport function validateBody<T>(event: APIGatewayProxyEvent, schema: ZodSchema<T>): T {\n  try {\n    const body = JSON.parse(event.body || '{}');\n    return schema.parse(body);\n  } catch (error: any) {\n    if (error.name === 'SyntaxError') {\n      throw new ValidationError('Invalid JSON in request body');\n    }\n    throw error; // Re-throw for error handler to catch Zod errors\n  }\n}\n\n/**\n * Validates query string parameters against a Zod schema\n */\nexport function validateQueryParams<T>(event: APIGatewayProxyEvent, schema: ZodSchema<T>): T {\n  try {\n    return schema.parse(event.queryStringParameters || {});\n  } catch (error) {\n    throw error; // Re-throw for error handler to catch Zod errors\n  }\n}\n\n/**\n * Validates path parameters against a Zod schema\n */\nexport function validatePathParams<T>(event: APIGatewayProxyEvent, schema: ZodSchema<T>): T {\n  try {\n    return schema.parse(event.pathParameters || {});\n  } catch (error) {\n    throw error; // Re-throw for error handler to catch Zod errors\n  }\n}\n\n/**\n * Extracts and validates authorization token from headers\n */\nexport function getAuthToken(event: APIGatewayProxyEvent): string {\n  const authHeader = event.headers.Authorization || event.headers.authorization;\n  \n  if (!authHeader) {\n    throw new ValidationError('No authorization token provided');\n  }\n  \n  if (!authHeader.startsWith('Bearer ')) {\n    throw new ValidationError('Invalid authorization header format');\n  }\n  \n  const token = authHeader.substring(7);\n  \n  if (!token) {\n    throw new ValidationError('Empty authorization token');\n  }\n  \n  return token;\n}\n\n/**\n * Validates content type header\n */\nexport function validateContentType(event: APIGatewayProxyEvent, expectedType: string): void {\n  const contentType = event.headers['Content-Type'] || event.headers['content-type'];\n  \n  if (!contentType || !contentType.includes(expectedType)) {\n    throw new ValidationError(`Content-Type must be ${expectedType}`);\n  }\n}"]}
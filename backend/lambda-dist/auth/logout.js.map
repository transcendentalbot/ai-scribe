{"version":3,"file":"logout.js","sourceRoot":"","sources":["../../../src/handlers/auth/logout.ts"],"names":[],"mappings":";;;AACA,iDAAqD;AACrD,mDAA0D;AAEnD,MAAM,OAAO,GAA2B,KAAK,EAAE,KAAK,EAAE,EAAE;IAC7D,IAAI,CAAC;QACH,6CAA6C;QAC7C,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC;QAC9E,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACrD,MAAM,IAAI,mBAAQ,CAAC,iCAAiC,EAAE,GAAG,CAAC,CAAC;QAC7D,CAAC;QAED,MAAM,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAE5C,iDAAiD;QACjD,IAAI,CAAC;YACH,MAAM,wBAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC5C,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,KAAK,CAAC,IAAI,KAAK,wBAAwB,EAAE,CAAC;gBAC5C,2DAA2D;gBAC3D,OAAO,mBAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC,CAAC;YAClE,CAAC;YACD,MAAM,KAAK,CAAC;QACd,CAAC;QAED,OAAO,mBAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC,CAAC;IAElE,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAEtC,IAAI,KAAK,YAAY,mBAAQ,EAAE,CAAC;YAC9B,OAAO,mBAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACvE,CAAC;QAED,OAAO,mBAAQ,CAAC,KAAK,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;IAC9C,CAAC;AACH,CAAC,CAAC;AAhCW,QAAA,OAAO,WAgClB","sourcesContent":["import { APIGatewayProxyHandler } from 'aws-lambda';\nimport { cognitoService } from '../../utils/cognito';\nimport { response, AppError } from '../../utils/response';\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    // Get access token from Authorization header\n    const authHeader = event.headers.Authorization || event.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      throw new AppError('No authorization token provided', 401);\n    }\n\n    const accessToken = authHeader.substring(7);\n\n    // Sign out from Cognito (invalidates all tokens)\n    try {\n      await cognitoService.signOut(accessToken);\n    } catch (error: any) {\n      if (error.name === 'NotAuthorizedException') {\n        // Token might already be invalid, which is fine for logout\n        return response.success({ message: 'Logged out successfully' });\n      }\n      throw error;\n    }\n\n    return response.success({ message: 'Logged out successfully' });\n\n  } catch (error: any) {\n    console.error('Logout error:', error);\n\n    if (error instanceof AppError) {\n      return response.error(error.message, error.statusCode, error.errors);\n    }\n\n    return response.error('Logout failed', 500);\n  }\n};"]}
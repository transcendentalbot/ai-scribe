{"version":3,"file":"error-handling-demo.js","sourceRoot":"","sources":["../../../src/handlers/example/error-handling-demo.ts"],"names":[],"mappings":"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","sourcesContent":["import { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { z } from 'zod';\nimport { errorHandler } from '../../middleware/error-handler';\nimport { validateBody, validateQueryParams, getAuthToken } from '../../middleware/request-validator';\nimport { logger } from '../../utils/logger';\nimport { metrics } from '../../utils/metrics';\nimport { \n  ValidationError, \n  AuthenticationError, \n  AuthorizationError, \n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  BusinessLogicError,\n  PHIAccessError,\n  InternalError\n} from '../../errors';\nimport { response } from '../../utils/response';\n\n// Example schemas\nconst DemoBodySchema = z.object({\n  action: z.enum(['validate', 'auth', 'notfound', 'conflict', 'ratelimit', 'business', 'phi', 'internal']),\n  data: z.record(z.any()).optional(),\n});\n\nconst DemoQuerySchema = z.object({\n  debug: z.enum(['true', 'false']).optional(),\n});\n\n/**\n * Demonstration handler showing all error handling capabilities\n */\nconst demoHandler = async (event: APIGatewayProxyEvent, context: Context) => {\n  const startTime = Date.now();\n\n  // Validate query parameters\n  const queryParams = validateQueryParams(event, DemoQuerySchema);\n  const debug = queryParams.debug === 'true';\n\n  // Log with structured data\n  logger.info('Error handling demo requested', {\n    path: event.path,\n    debug,\n  });\n\n  // Validate request body\n  const body = validateBody(event, DemoBodySchema);\n\n  // Demonstrate different error types based on action\n  switch (body.action) {\n    case 'validate':\n      // This will throw a ZodError, caught by error handler\n      z.object({\n        required: z.string(),\n        email: z.string().email(),\n      }).parse(body.data || {});\n      break;\n\n    case 'auth':\n      // Demonstrate authentication error\n      const token = getAuthToken(event);\n      if (token !== 'valid-token') {\n        throw new AuthenticationError('Invalid authentication token');\n      }\n      break;\n\n    case 'notfound':\n      // Demonstrate not found error\n      throw new NotFoundError('User');\n\n    case 'conflict':\n      // Demonstrate conflict error\n      throw new ConflictError('User with this email already exists');\n\n    case 'ratelimit':\n      // Demonstrate rate limit error\n      metrics.count('RateLimitExceeded', 1, 'Count', { Endpoint: '/demo' });\n      throw new RateLimitError('API rate limit exceeded. Please try again in 60 seconds.');\n\n    case 'business':\n      // Demonstrate business logic error\n      throw new BusinessLogicError('Cannot process order: insufficient inventory', 422);\n\n    case 'phi':\n      // Demonstrate PHI access error\n      logger.audit('UNAUTHORIZED_PHI_ACCESS', 'user123', 'patient456', {\n        attemptedAction: 'read',\n        reason: 'No consent on file',\n      });\n      throw new PHIAccessError('You do not have permission to access this patient\\'s records');\n\n    case 'internal':\n      // Demonstrate internal error (non-operational)\n      throw new InternalError('Database connection failed', false);\n\n    default:\n      // Should never reach here due to schema validation\n      throw new ValidationError('Invalid action');\n  }\n\n  // If we get here, action was 'auth' with valid token\n  metrics.success('ErrorHandlingDemo', { Action: body.action });\n  metrics.duration('DemoHandlerDuration', startTime);\n\n  return response.success({\n    message: 'Action completed successfully',\n    action: body.action,\n    debug: debug ? {\n      correlationId: context.awsRequestId,\n      duration: Date.now() - startTime,\n    } : undefined,\n  });\n};\n\n// Export with error handling\nexport const handler = errorHandler(demoHandler);\n\n/**\n * Example usage with curl:\n * \n * # Validation error\n * curl -X POST https://api.example.com/demo \\\n *   -H \"Content-Type: application/json\" \\\n *   -d '{\"action\": \"validate\", \"data\": {\"email\": \"invalid-email\"}}'\n * \n * # Authentication error\n * curl -X POST https://api.example.com/demo \\\n *   -H \"Content-Type: application/json\" \\\n *   -H \"Authorization: Bearer invalid-token\" \\\n *   -d '{\"action\": \"auth\"}'\n * \n * # Not found error\n * curl -X POST https://api.example.com/demo \\\n *   -H \"Content-Type: application/json\" \\\n *   -d '{\"action\": \"notfound\"}'\n * \n * # Business logic error\n * curl -X POST https://api.example.com/demo \\\n *   -H \"Content-Type: application/json\" \\\n *   -d '{\"action\": \"business\"}'\n */"]}
{"version":3,"file":"update-speaker.js","sourceRoot":"","sources":["../../../src/handlers/transcripts/update-speaker.ts"],"names":[],"mappings":";;;AACA,8DAA0D;AAC1D,wDAA8E;AAC9E,mDAAgD;AAEhD,MAAM,YAAY,GAAG,IAAI,gCAAc,CAAC,EAAE,CAAC,CAAC;AAC5C,MAAM,SAAS,GAAG,qCAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAErD,MAAM,OAAO,GAAG,KAAK,EAC1B,KAA2B,EACK,EAAE;IAClC,IAAI,CAAC;QACH,MAAM,WAAW,GAAG,KAAK,CAAC,cAAc,EAAE,WAAW,CAAC;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;QAC5C,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEpC,IAAI,CAAC,WAAW,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,EAAE,CAAC;YAC3C,OAAO,mBAAQ,CAAC,KAAK,CAAC,mDAAmD,EAAE,GAAG,CAAC,CAAC;QAClF,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,oDAAoD,WAAW,gBAAgB,SAAS,cAAc,OAAO,EAAE,CAAC,CAAC;QAE7H,MAAM,SAAS,CAAC,IAAI,CAClB,IAAI,4BAAa,CAAC;YAChB,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW;YAClC,GAAG,EAAE;gBACH,EAAE,EAAE,aAAa,WAAW,EAAE;gBAC9B,EAAE,EAAE,cAAc,SAAS,EAAE;aAC9B;YACD,gBAAgB,EAAE,wBAAwB;YAC1C,yBAAyB,EAAE;gBACzB,UAAU,EAAE,OAAO;aACpB;SACF,CAAC,CACH,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QAE7D,OAAO,mBAAQ,CAAC,OAAO,CAAC;YACtB,OAAO,EAAE,8BAA8B;YACvC,WAAW;YACX,SAAS;YACT,OAAO;SACR,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAChD,OAAO,mBAAQ,CAAC,KAAK,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC;IACzD,CAAC;AACH,CAAC,CAAC;AAxCW,QAAA,OAAO,WAwClB","sourcesContent":["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient, UpdateCommand } from '@aws-sdk/lib-dynamodb';\nimport { response } from '../../utils/response';\n\nconst dynamoClient = new DynamoDBClient({});\nconst docClient = DynamoDBDocumentClient.from(dynamoClient);\n\nexport const handler = async (\n  event: APIGatewayProxyEvent\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const encounterId = event.pathParameters?.encounterId;\n    const body = JSON.parse(event.body || '{}');\n    const { timestamp, speaker } = body;\n\n    if (!encounterId || !timestamp || !speaker) {\n      return response.error('Encounter ID, timestamp, and speaker are required', 400);\n    }\n\n    console.log(`[update-speaker] Updating speaker for encounter: ${encounterId}, timestamp: ${timestamp}, speaker: ${speaker}`);\n\n    await docClient.send(\n      new UpdateCommand({\n        TableName: process.env.TABLE_NAME!,\n        Key: {\n          pk: `ENCOUNTER#${encounterId}`,\n          sk: `TRANSCRIPT#${timestamp}`,\n        },\n        UpdateExpression: 'SET speaker = :speaker',\n        ExpressionAttributeValues: {\n          ':speaker': speaker,\n        },\n      })\n    );\n\n    console.log(`[update-speaker] Successfully updated speaker`);\n\n    return response.success({\n      message: 'Speaker updated successfully',\n      encounterId,\n      timestamp,\n      speaker,\n    });\n  } catch (error) {\n    console.error('[update-speaker] Error:', error);\n    return response.error('Failed to update speaker', 500);\n  }\n};"]}
{"version":3,"file":"connect.js","sourceRoot":"","sources":["../../../src/handlers/websocket/connect.ts"],"names":[],"mappings":";;;AACA,8DAA0D;AAC1D,wDAA2E;AAE3E,MAAM,YAAY,GAAG,IAAI,gCAAc,CAAC,EAAE,CAAC,CAAC;AAC5C,MAAM,SAAS,GAAG,qCAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAErD,MAAM,OAAO,GAAG,KAAK,EAC1B,KAA2B,EACK,EAAE;IAClC,MAAM,YAAY,GAAG,KAAK,CAAC,cAAc,CAAC,YAAa,CAAC;IACxD,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IAE3C,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE;QAC3C,YAAY;QACZ,QAAQ,EAAE,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ;QAChD,SAAS,EAAE,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS;KACnD,CAAC,CAAC;IAEH,IAAI,CAAC;QACH,+BAA+B;QAC/B,MAAM,SAAS,CAAC,IAAI,CAClB,IAAI,yBAAU,CAAC;YACb,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,sBAAuB;YAC9C,IAAI,EAAE;gBACJ,YAAY;gBACZ,WAAW,EAAE,SAAS;gBACtB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,EAAE,aAAa;gBACxD,MAAM,EAAE,WAAW;gBACnB,QAAQ,EAAE,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ;gBAChD,SAAS,EAAE,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS;aACnD;SACF,CAAC,CACH,CAAC;QAEF,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;SAC5D,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;SACvD,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAvCW,QAAA,OAAO,WAuClB","sourcesContent":["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient, PutCommand } from '@aws-sdk/lib-dynamodb';\n\nconst dynamoClient = new DynamoDBClient({});\nconst docClient = DynamoDBDocumentClient.from(dynamoClient);\n\nexport const handler = async (\n  event: APIGatewayProxyEvent\n): Promise<APIGatewayProxyResult> => {\n  const connectionId = event.requestContext.connectionId!;\n  const timestamp = new Date().toISOString();\n\n  console.log('WebSocket connection request:', {\n    connectionId,\n    sourceIp: event.requestContext.identity.sourceIp,\n    userAgent: event.requestContext.identity.userAgent,\n  });\n\n  try {\n    // Store connection in DynamoDB\n    await docClient.send(\n      new PutCommand({\n        TableName: process.env.CONNECTIONS_TABLE_NAME!,\n        Item: {\n          connectionId,\n          connectedAt: timestamp,\n          ttl: Math.floor(Date.now() / 1000) + 3600, // 1 hour TTL\n          status: 'connected',\n          sourceIp: event.requestContext.identity.sourceIp,\n          userAgent: event.requestContext.identity.userAgent,\n        },\n      })\n    );\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ message: 'Connected successfully' }),\n    };\n  } catch (error) {\n    console.error('Error storing connection:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: 'Failed to connect' }),\n    };\n  }\n};"]}
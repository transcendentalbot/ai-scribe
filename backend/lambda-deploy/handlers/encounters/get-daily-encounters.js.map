{"version":3,"file":"get-daily-encounters.js","sourceRoot":"","sources":["../../../src/handlers/encounters/get-daily-encounters.ts"],"names":[],"mappings":"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","sourcesContent":["import { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';\nimport { DailyEncounterListSchema } from '../../types/encounter';\nimport { EncounterService } from '../../services/encounter.service';\nimport { PatientService } from '../../services/patient.service';\nimport { errorHandler } from '../../middleware/error-handler';\nimport { validateQueryParams, getAuthToken } from '../../middleware/request-validator';\nimport { response } from '../../utils/response';\nimport { logger } from '../../utils/logger';\nimport { metrics } from '../../utils/metrics';\nimport { cognitoService } from '../../utils/cognito';\nimport { AuthorizationError } from '../../errors';\nimport jwt from 'jsonwebtoken';\n\nconst dynamoClient = new DynamoDBClient({});\nconst dynamodb = DynamoDBDocumentClient.from(dynamoClient);\nconst encounterService = new EncounterService(dynamodb, process.env.TABLE_NAME!);\nconst patientService = new PatientService(dynamodb, process.env.TABLE_NAME!);\n\nconst getDailyEncountersHandler = async (event: APIGatewayProxyEvent, context: Context) => {\n  const startTime = Date.now();\n  \n  // Get provider ID from token\n  const token = getAuthToken(event);\n  \n  // Decode the access token to get the user ID\n  const decodedToken = jwt.decode(token) as any;\n  const currentProviderId = decodedToken?.sub || decodedToken?.username;\n  \n  if (!currentProviderId) {\n    throw new AuthorizationError('Provider ID not found in token');\n  }\n\n  // Validate query parameters\n  const { date, providerId, status, limit, nextToken } = validateQueryParams(event, DailyEncounterListSchema);\n\n  // Use current provider if not specified\n  const targetProviderId = providerId || currentProviderId;\n  \n  // Use today's date if not specified\n  const targetDate = date || new Date().toISOString().split('T')[0];\n\n  logger.info('Getting daily encounters', {\n    currentProviderId,\n    targetProviderId,\n    date: targetDate,\n    status,\n  });\n\n  // Get encounters\n  const result = await encounterService.getDailyEncounters(\n    targetProviderId,\n    targetDate,\n    status,\n    Number(limit),\n    nextToken\n  );\n\n  // Get unique patient IDs\n  const patientIds = [...new Set(result.encounters.map(e => e.patientId))];\n  \n  // Batch get patient information\n  const patients = await patientService.getPatientsByIds(patientIds);\n  const patientMap = new Map(patients.map(p => [p.id, p]));\n\n  // Enrich encounters with patient data\n  const enrichedEncounters = result.encounters.map(encounter => ({\n    ...encounter,\n    patient: patientMap.get(encounter.patientId) || null,\n  }));\n\n  // Log PHI access\n  logger.audit('DAILY_ENCOUNTERS_ACCESSED', currentProviderId, targetDate, {\n    providerId: targetProviderId,\n    date: targetDate,\n    count: result.encounters.length,\n    action: 'LIST',\n  });\n\n  // Track metrics\n  metrics.success('GetDailyEncounters');\n  metrics.duration('GetDailyEncountersDuration', startTime);\n  metrics.gauge('DailyEncounterCount', result.encounters.length);\n\n  return response.success({\n    date: targetDate,\n    providerId: targetProviderId,\n    encounters: enrichedEncounters,\n    nextToken: result.nextToken,\n    summary: {\n      total: enrichedEncounters.length,\n      byStatus: enrichedEncounters.reduce((acc, e) => {\n        acc[e.status] = (acc[e.status] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>),\n    },\n  });\n};\n\nexport const handler = errorHandler(getDailyEncountersHandler);"]}
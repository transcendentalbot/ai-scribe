{"version":3,"file":"capture-consent.js","sourceRoot":"","sources":["../../../src/handlers/encounters/capture-consent.ts"],"names":[],"mappings":";;;AACA,8DAA0D;AAC1D,wDAA+D;AAC/D,6BAAwB;AACxB,qDAA6D;AAC7D,wEAAoE;AACpE,kEAA8D;AAC9D,0EAAsF;AACtF,mDAAgD;AAChD,+CAA4C;AAC5C,iDAA8C;AAC9C,yCAAyD;AACzD,yCAAiE;AAEjE,MAAM,YAAY,GAAG,IAAI,gCAAc,CAAC,EAAE,CAAC,CAAC;AAC5C,MAAM,QAAQ,GAAG,qCAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC3D,MAAM,gBAAgB,GAAG,IAAI,oCAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW,CAAC,CAAC;AAEjF,MAAM,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;IAChC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;CAC/B,CAAC,CAAC;AAEH,MAAM,qBAAqB,GAAG,KAAK,EAAE,KAA2B,EAAE,OAAgB,EAAE,EAAE;IACpF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,6BAA6B;IAC7B,MAAM,UAAU,GAAG,IAAA,4BAAsB,EAAC,KAAK,CAAC,CAAC;IAEjD,2BAA2B;IAC3B,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,sCAAkB,EAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;IAEpE,wBAAwB;IACxB,MAAM,WAAW,GAAG,IAAA,gCAAY,EAAC,KAAK,EAAE,gCAAoB,CAAC,CAAC;IAE9D,eAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;QAC/B,UAAU;QACV,WAAW;QACX,WAAW,EAAE,WAAW,CAAC,IAAI;QAC7B,OAAO,EAAE,WAAW,CAAC,OAAO;KAC7B,CAAC,CAAC;IAEH,uDAAuD;IACvD,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC1E,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACtB,MAAM,IAAI,sBAAa,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAED,iDAAiD;IACjD,IAAI,gBAAgB,CAAC,UAAU,KAAK,UAAU,EAAE,CAAC;QAC/C,MAAM,IAAI,2BAAkB,CAAC,sDAAsD,CAAC,CAAC;IACvF,CAAC;IAED,kBAAkB;IAClB,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC,cAAc,CACrD,WAAW,EACX,WAAW,EACX,gBAAgB,CAAC,SAAS,EAAE,8BAA8B;IAC1D,UAAU,CACX,CAAC;IAEF,gBAAgB;IAChB,iBAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAClC,iBAAO,CAAC,QAAQ,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;IACtD,iBAAO,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,EAAE,OAAO,EAAE;QACvC,IAAI,EAAE,WAAW,CAAC,IAAI;QACtB,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE;KACxC,CAAC,CAAC;IAEH,OAAO,mBAAQ,CAAC,OAAO,CAAC;QACtB,SAAS;QACT,OAAO,EAAE,eAAe,WAAW,CAAC,IAAI,aAAa,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,EAAE;KAClG,CAAC,CAAC;AACL,CAAC,CAAC;AAEW,QAAA,OAAO,GAAG,IAAA,4BAAY,EAAC,qBAAqB,CAAC,CAAC","sourcesContent":["import { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';\nimport { z } from 'zod';\nimport { CaptureConsentSchema } from '../../types/encounter';\nimport { EncounterService } from '../../services/encounter.service';\nimport { errorHandler } from '../../middleware/error-handler';\nimport { validateBody, validatePathParams } from '../../middleware/request-validator';\nimport { response } from '../../utils/response';\nimport { logger } from '../../utils/logger';\nimport { metrics } from '../../utils/metrics';\nimport { getProviderIdFromToken } from '../../utils/jwt';\nimport { AuthorizationError, NotFoundError } from '../../errors';\n\nconst dynamoClient = new DynamoDBClient({});\nconst dynamodb = DynamoDBDocumentClient.from(dynamoClient);\nconst encounterService = new EncounterService(dynamodb, process.env.TABLE_NAME!);\n\nconst PathParamsSchema = z.object({\n  encounterId: z.string().uuid(),\n});\n\nconst captureConsentHandler = async (event: APIGatewayProxyEvent, context: Context) => {\n  const startTime = Date.now();\n  \n  // Get provider ID from token\n  const providerId = getProviderIdFromToken(event);\n\n  // Validate path parameters\n  const { encounterId } = validatePathParams(event, PathParamsSchema);\n\n  // Validate request body\n  const consentData = validateBody(event, CaptureConsentSchema);\n\n  logger.info('Capturing consent', {\n    providerId,\n    encounterId,\n    consentType: consentData.type,\n    granted: consentData.granted,\n  });\n\n  // Get encounter to verify it exists and get patient ID\n  const currentEncounter = await encounterService.getEncounter(encounterId);\n  if (!currentEncounter) {\n    throw new NotFoundError('Encounter');\n  }\n\n  // Only the assigned provider can capture consent\n  if (currentEncounter.providerId !== providerId) {\n    throw new AuthorizationError('You can only capture consent for your own encounters');\n  }\n\n  // Capture consent\n  const encounter = await encounterService.captureConsent(\n    encounterId,\n    consentData,\n    currentEncounter.patientId, // Patient is granting consent\n    providerId\n  );\n\n  // Track metrics\n  metrics.success('CaptureConsent');\n  metrics.duration('CaptureConsentDuration', startTime);\n  metrics.count('ConsentType', 1, 'Count', { \n    Type: consentData.type,\n    Granted: consentData.granted.toString(),\n  });\n\n  return response.success({\n    encounter,\n    message: `Consent for ${consentData.type} has been ${consentData.granted ? 'granted' : 'denied'}`,\n  });\n};\n\nexport const handler = errorHandler(captureConsentHandler);"]}
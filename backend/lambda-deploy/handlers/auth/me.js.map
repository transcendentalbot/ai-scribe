{"version":3,"file":"me.js","sourceRoot":"","sources":["../../../src/handlers/auth/me.ts"],"names":[],"mappings":";;;AACA,iDAAqD;AACrD,mDAAmD;AACnD,mDAA0D;AAEnD,MAAM,OAAO,GAA2B,KAAK,EAAE,KAAK,EAAE,EAAE;IAC7D,IAAI,CAAC;QACH,6CAA6C;QAC7C,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC;QAC9E,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACrD,MAAM,IAAI,mBAAQ,CAAC,iCAAiC,EAAE,GAAG,CAAC,CAAC;QAC7D,CAAC;QAED,MAAM,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAE5C,6BAA6B;QAC7B,IAAI,WAAW,CAAC;QAChB,IAAI,CAAC;YACH,WAAW,GAAG,MAAM,wBAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC1D,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,KAAK,CAAC,IAAI,KAAK,wBAAwB,EAAE,CAAC;gBAC5C,MAAM,IAAI,mBAAQ,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC;YACtD,CAAC;YACD,MAAM,KAAK,CAAC;QACd,CAAC;QAED,0CAA0C;QAC1C,MAAM,eAAe,GAAG,WAAW,CAAC,cAAc,EAAE,IAAI,CACtD,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,oBAAoB,IAAI,IAAI,CAAC,IAAI,KAAK,gBAAgB,CAC7E,CAAC;QAEF,MAAM,MAAM,GAAG,eAAe,EAAE,KAAK,IAAI,WAAW,CAAC,QAAQ,CAAC;QAE9D,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,mBAAQ,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;QAC/C,CAAC;QAED,yBAAyB;QACzB,MAAM,IAAI,GAAG,MAAM,sBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,mBAAQ,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QAC5C,CAAC;QAED,mBAAmB;QACnB,OAAO,mBAAQ,CAAC,OAAO,CAAC;YACtB,IAAI,EAAE;gBACJ,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,aAAa,EAAE,IAAI,CAAC,aAAa;gBACjC,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,aAAa,EAAE,IAAI,CAAC,aAAa;gBACjC,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,WAAW,EAAE,IAAI,CAAC,WAAW;aAC9B;SACF,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QAExC,IAAI,KAAK,YAAY,mBAAQ,EAAE,CAAC;YAC9B,OAAO,mBAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACvE,CAAC;QAED,OAAO,mBAAQ,CAAC,KAAK,CAAC,gCAAgC,EAAE,GAAG,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC,CAAC;AAjEW,QAAA,OAAO,WAiElB","sourcesContent":["import { APIGatewayProxyHandler } from 'aws-lambda';\nimport { cognitoService } from '../../utils/cognito';\nimport { userService } from '../../utils/dynamodb';\nimport { response, AppError } from '../../utils/response';\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    // Get access token from Authorization header\n    const authHeader = event.headers.Authorization || event.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      throw new AppError('No authorization token provided', 401);\n    }\n\n    const accessToken = authHeader.substring(7);\n\n    // Get user info from Cognito\n    let cognitoUser;\n    try {\n      cognitoUser = await cognitoService.getUser(accessToken);\n    } catch (error: any) {\n      if (error.name === 'NotAuthorizedException') {\n        throw new AppError('Invalid or expired token', 401);\n      }\n      throw error;\n    }\n\n    // Extract user ID from Cognito attributes\n    const userIdAttribute = cognitoUser.UserAttributes?.find(\n      attr => attr.Name === 'custom:provider_id' || attr.Name === 'custom:user_id'\n    );\n    \n    const userId = userIdAttribute?.Value || cognitoUser.Username;\n    \n    if (!userId) {\n      throw new AppError('User ID not found', 500);\n    }\n\n    // Get user from DynamoDB\n    const user = await userService.getUser(userId);\n    if (!user) {\n      throw new AppError('User not found', 404);\n    }\n\n    // Return user data\n    return response.success({\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phoneNumber: user.phoneNumber,\n        licenseNumber: user.licenseNumber,\n        specialty: user.specialty,\n        organization: user.organization,\n        emailVerified: user.emailVerified,\n        mfaEnabled: user.mfaEnabled,\n        createdAt: user.createdAt,\n        lastLoginAt: user.lastLoginAt,\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Get user error:', error);\n\n    if (error instanceof AppError) {\n      return response.error(error.message, error.statusCode, error.errors);\n    }\n\n    return response.error('Failed to get user information', 500);\n  }\n};"]}
{"version":3,"file":"login.js","sourceRoot":"","sources":["../../../src/handlers/auth/login.ts"],"names":[],"mappings":"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","sourcesContent":["import { APIGatewayProxyHandler } from 'aws-lambda';\nimport { LoginSchema, AuthResponse } from '../../types/auth';\nimport { cognitoService } from '../../utils/cognito';\nimport { userService } from '../../utils/dynamodb';\nimport { response, AppError } from '../../utils/response';\nimport jwt from 'jsonwebtoken';\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    // Parse and validate request body\n    const body = JSON.parse(event.body || '{}');\n    const validatedData = LoginSchema.parse(body);\n\n    // Authenticate with Cognito\n    let authResult;\n    try {\n      authResult = await cognitoService.signIn(\n        validatedData.email,\n        validatedData.password\n      );\n    } catch (error: any) {\n      if (error.name === 'NotAuthorizedException') {\n        throw new AppError('Invalid email or password', 401);\n      }\n      if (error.name === 'UserNotConfirmedException') {\n        throw new AppError('Please verify your email before logging in', 403);\n      }\n      throw error;\n    }\n\n    if (!authResult.AuthenticationResult) {\n      throw new AppError('Authentication failed', 401);\n    }\n\n    // Decode the ID token to get user information\n    const idToken = authResult.AuthenticationResult.IdToken!;\n    const decodedToken = jwt.decode(idToken) as any;\n    const userId = decodedToken['custom:provider_id'] || decodedToken['custom:user_id'] || decodedToken.sub;\n\n    // Get user from DynamoDB\n    const user = await userService.getUser(userId);\n    if (!user) {\n      throw new AppError('User not found', 404);\n    }\n\n    // Update last login\n    await userService.updateLastLogin(userId);\n\n    // Prepare response\n    const authResponse: AuthResponse = {\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phoneNumber: user.phoneNumber,\n        licenseNumber: user.licenseNumber,\n        specialty: user.specialty,\n        organization: user.organization,\n      },\n      tokens: {\n        accessToken: authResult.AuthenticationResult.AccessToken!,\n        refreshToken: authResult.AuthenticationResult.RefreshToken!,\n        idToken: authResult.AuthenticationResult.IdToken!,\n      },\n    };\n\n    return response.success(authResponse);\n\n  } catch (error: any) {\n    console.error('Login error:', error);\n\n    if (error.name === 'ZodError') {\n      return response.error('Validation failed', 400, error.errors);\n    }\n\n    if (error instanceof AppError) {\n      return response.error(error.message, error.statusCode, error.errors);\n    }\n\n    return response.error('Login failed', 500);\n  }\n};"]}
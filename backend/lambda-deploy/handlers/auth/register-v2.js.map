{"version":3,"file":"register-v2.js","sourceRoot":"","sources":["../../../src/handlers/auth/register-v2.ts"],"names":[],"mappings":"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","sourcesContent":["import { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { v4 as uuidv4 } from 'uuid';\nimport { RegisterSchema } from '../../types/auth';\nimport { cognitoService } from '../../utils/cognito';\nimport { userService, dynamodb } from '../../utils/dynamodb';\nimport { response } from '../../utils/response';\nimport { errorHandler } from '../../middleware/error-handler';\nimport { validateBody } from '../../middleware/request-validator';\nimport { getCorrelationId, createLogContext } from '../../middleware/correlation-id';\nimport { logger } from '../../utils/logger';\nimport { metrics } from '../../utils/metrics';\nimport { ConflictError, BusinessLogicError } from '../../errors';\nimport { PutCommand } from '@aws-sdk/lib-dynamodb';\n\n/**\n * Enhanced registration handler with comprehensive error handling\n */\nconst registerHandler = async (event: APIGatewayProxyEvent, context: Context) => {\n  const startTime = Date.now();\n  const correlationId = getCorrelationId(event);\n  const logContext = createLogContext(event, correlationId);\n\n  logger.info('Registration attempt started', logContext);\n\n  // Validate request body\n  const validatedData = validateBody(event, RegisterSchema);\n  \n  // Generate user ID\n  const userId = uuidv4();\n  \n  try {\n    // Register user in Cognito\n    logger.info('Creating Cognito user', { ...logContext, email: validatedData.email });\n    \n    await cognitoService.signUp(validatedData.email, validatedData.password, {\n      email: validatedData.email,\n      given_name: validatedData.firstName,\n      family_name: validatedData.lastName,\n      phone_number: validatedData.phoneNumber || '',\n      'custom:user_id': userId,\n      'custom:license_number': validatedData.licenseNumber || '',\n      'custom:specialty': validatedData.specialty || '',\n      'custom:organization': validatedData.organization || '',\n    });\n\n    logger.info('Cognito user created successfully', { ...logContext, userId });\n\n    // Create user in DynamoDB\n    const user = await userService.createUser({\n      id: userId,\n      email: validatedData.email.toLowerCase(),\n      firstName: validatedData.firstName,\n      lastName: validatedData.lastName,\n      phoneNumber: validatedData.phoneNumber,\n      licenseNumber: validatedData.licenseNumber,\n      specialty: validatedData.specialty,\n      organization: validatedData.organization,\n    } as any);\n\n    // Create GSI entry for email lookup\n    await dynamodb.send(\n      new PutCommand({\n        TableName: process.env.TABLE_NAME!,\n        Item: {\n          pk: `EMAIL#${validatedData.email.toLowerCase()}`,\n          sk: `USER#${userId}`,\n          gsi1pk: `EMAIL#${validatedData.email.toLowerCase()}`,\n          gsi1sk: `USER#${userId}`,\n          id: userId,\n        },\n      })\n    );\n\n    // Record metrics\n    metrics.success('UserRegistration', { UserType: 'Provider' });\n    metrics.authAttempt(true, 'Register');\n    metrics.duration('RegistrationDuration', startTime);\n\n    // Log audit event\n    logger.audit('USER_CREATED', userId, userId, {\n      email: validatedData.email,\n      organization: validatedData.organization,\n    });\n\n    return response.success({\n      message: 'Registration successful. Please check your email for verification code.',\n      userId: userId,\n      correlationId,\n    }, 201);\n\n  } catch (error: any) {\n    // Record failure metrics\n    metrics.failure('UserRegistration', error.name || 'Unknown');\n    metrics.authAttempt(false, 'Register', error.name);\n\n    // Handle specific Cognito errors\n    if (error.name === 'UsernameExistsException') {\n      throw new ConflictError('An account with this email already exists');\n    }\n\n    if (error.name === 'InvalidPasswordException') {\n      throw new BusinessLogicError(\n        'Password does not meet requirements: minimum 12 characters, including uppercase, lowercase, number, and special character',\n        400\n      );\n    }\n\n    if (error.name === 'InvalidParameterException') {\n      throw new BusinessLogicError('Invalid registration parameters', 400);\n    }\n\n    // Re-throw to be handled by error middleware\n    throw error;\n  }\n};\n\n// Export handler wrapped with error handling middleware\nexport const handler = errorHandler(registerHandler);"]}
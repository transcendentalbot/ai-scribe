{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../src/handlers/recordings/upload.ts"],"names":[],"mappings":";;;AACA,kDAAgE;AAChE,wEAA6D;AAC7D,mDAAgD;AAChD,yCAAmD;AACnD,+BAAoC;AAEpC,MAAM,QAAQ,GAAG,IAAI,oBAAQ,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;AAClE,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,sBAAsB,CAAC;AAErE,MAAM,OAAO,GAA2B,KAAK,EAAE,KAAK,EAAE,EAAE;IAC7D,IAAI,CAAC;QACH,4DAA4D;QAC5D,MAAM,IAAI,GAAG,IAAA,sBAAgB,EAAC,KAAK,CAAC,CAAC;QAErC,oDAAoD;QACpD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;QAC5C,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAEvC,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC9B,OAAO,mBAAQ,CAAC,KAAK,CAAC,iCAAiC,EAAE,GAAG,CAAC,CAAC;QAChE,CAAC;QAED,gBAAgB;QAChB,MAAM,WAAW,GAAG,IAAA,SAAM,GAAE,CAAC;QAC7B,MAAM,KAAK,GAAG,cAAc,WAAW,IAAI,WAAW,IAAI,QAAQ,EAAE,CAAC;QAErE,iCAAiC;QACjC,MAAM,OAAO,GAAG,IAAI,4BAAgB,CAAC;YACnC,MAAM,EAAE,WAAW;YACnB,GAAG,EAAE,KAAK;YACV,WAAW,EAAE,YAAY;SAC1B,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,MAAM,IAAA,mCAAY,EAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAEhF,OAAO,mBAAQ,CAAC,OAAO,CAAC;YACtB,YAAY;YACZ,KAAK;YACL,WAAW;SACZ,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QACtC,OAAO,mBAAQ,CAAC,KAAK,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAC;IAC9D,CAAC;AACH,CAAC,CAAC;AAnCW,QAAA,OAAO,WAmClB","sourcesContent":["import { APIGatewayProxyHandler } from 'aws-lambda';\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { response } from '../../utils/response';\nimport { getUserFromToken } from '../../utils/jwt';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst s3Client = new S3Client({ region: process.env.AWS_REGION });\nconst BUCKET_NAME = process.env.RECORDINGS_BUCKET || 'ai-scribe-recordings';\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    // Get user from token (API Gateway has already verified it)\n    const user = getUserFromToken(event);\n\n    // For now, return a presigned URL for direct upload\n    const body = JSON.parse(event.body || '{}');\n    const { encounterId, filename } = body;\n    \n    if (!encounterId || !filename) {\n      return response.error('Missing encounterId or filename', 400);\n    }\n\n    // Create S3 key\n    const recordingId = uuidv4();\n    const s3Key = `recordings/${encounterId}/${recordingId}/${filename}`;\n\n    // Generate presigned URL for PUT\n    const command = new PutObjectCommand({\n      Bucket: BUCKET_NAME,\n      Key: s3Key,\n      ContentType: 'audio/webm',\n    });\n\n    const presignedUrl = await getSignedUrl(s3Client, command, { expiresIn: 3600 });\n\n    return response.success({\n      presignedUrl,\n      s3Key,\n      recordingId,\n    });\n  } catch (error) {\n    console.error('Upload error:', error);\n    return response.error('Failed to generate upload URL', 500);\n  }\n};"]}
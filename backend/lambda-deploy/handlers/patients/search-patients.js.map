{"version":3,"file":"search-patients.js","sourceRoot":"","sources":["../../../src/handlers/patients/search-patients.ts"],"names":[],"mappings":";;;;;;AACA,8DAA0D;AAC1D,wDAA+D;AAC/D,iDAA0D;AAC1D,oEAAgE;AAChE,kEAA8D;AAC9D,0EAAuF;AACvF,mDAAgD;AAChD,+CAA4C;AAC5C,iDAA8C;AAE9C,yCAAkD;AAClD,gEAA+B;AAE/B,MAAM,YAAY,GAAG,IAAI,gCAAc,CAAC,EAAE,CAAC,CAAC;AAC5C,MAAM,QAAQ,GAAG,qCAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC3D,MAAM,cAAc,GAAG,IAAI,gCAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW,CAAC,CAAC;AAE7E,MAAM,qBAAqB,GAAG,KAAK,EAAE,KAA2B,EAAE,OAAgB,EAAE,EAAE;IACpF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,6BAA6B;IAC7B,MAAM,KAAK,GAAG,IAAA,gCAAY,EAAC,KAAK,CAAC,CAAC;IAClC,6CAA6C;IAC7C,MAAM,YAAY,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,CAAQ,CAAC;IAC9C,MAAM,UAAU,GAAG,YAAY,EAAE,GAAG,IAAI,YAAY,EAAE,QAAQ,CAAC;IAE/D,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,2BAAkB,CAAC,uBAAuB,CAAC,CAAC;IACxD,CAAC;IAED,4BAA4B;IAC5B,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAA,uCAAmB,EAAC,KAAK,EAAE,6BAAmB,CAAC,CAAC;IAEpF,eAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE;QAChC,UAAU;QACV,KAAK;QACL,KAAK;KACN,CAAC,CAAC;IAEH,kBAAkB;IAClB,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;IAEpF,iBAAiB;IACjB,eAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,UAAU,EAAE,QAAQ,EAAE;QACnD,KAAK;QACL,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM;QACnC,MAAM,EAAE,QAAQ;KACjB,CAAC,CAAC;IAEH,gBAAgB;IAChB,iBAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAClC,iBAAO,CAAC,QAAQ,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;IACtD,iBAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE3D,OAAO,mBAAQ,CAAC,OAAO,CAAC;QACtB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,SAAS,EAAE,MAAM,CAAC,SAAS;KAC5B,CAAC,CAAC;AACL,CAAC,CAAC;AAEW,QAAA,OAAO,GAAG,IAAA,4BAAY,EAAC,qBAAqB,CAAC,CAAC","sourcesContent":["import { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';\nimport { PatientSearchSchema } from '../../types/patient';\nimport { PatientService } from '../../services/patient.service';\nimport { errorHandler } from '../../middleware/error-handler';\nimport { validateQueryParams, getAuthToken } from '../../middleware/request-validator';\nimport { response } from '../../utils/response';\nimport { logger } from '../../utils/logger';\nimport { metrics } from '../../utils/metrics';\nimport { cognitoService } from '../../utils/cognito';\nimport { AuthorizationError } from '../../errors';\nimport jwt from 'jsonwebtoken';\n\nconst dynamoClient = new DynamoDBClient({});\nconst dynamodb = DynamoDBDocumentClient.from(dynamoClient);\nconst patientService = new PatientService(dynamodb, process.env.TABLE_NAME!);\n\nconst searchPatientsHandler = async (event: APIGatewayProxyEvent, context: Context) => {\n  const startTime = Date.now();\n  \n  // Get provider ID from token\n  const token = getAuthToken(event);\n  // Decode the access token to get the user ID\n  const decodedToken = jwt.decode(token) as any;\n  const providerId = decodedToken?.sub || decodedToken?.username;\n  \n  if (!providerId) {\n    throw new AuthorizationError('Provider ID not found');\n  }\n\n  // Validate query parameters\n  const { query, limit, nextToken } = validateQueryParams(event, PatientSearchSchema);\n\n  logger.info('Searching patients', {\n    providerId,\n    query,\n    limit,\n  });\n\n  // Search patients\n  const result = await patientService.searchPatients(query, Number(limit), nextToken);\n\n  // Log PHI access\n  logger.audit('PATIENT_SEARCH', providerId, 'SEARCH', {\n    query,\n    resultCount: result.patients.length,\n    action: 'SEARCH',\n  });\n\n  // Track metrics\n  metrics.success('SearchPatients');\n  metrics.duration('SearchPatientsDuration', startTime);\n  metrics.gauge('SearchResultCount', result.patients.length);\n\n  return response.success({\n    patients: result.patients,\n    nextToken: result.nextToken,\n  });\n};\n\nexport const handler = errorHandler(searchPatientsHandler);"]}
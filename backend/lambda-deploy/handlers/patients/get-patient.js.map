{"version":3,"file":"get-patient.js","sourceRoot":"","sources":["../../../src/handlers/patients/get-patient.ts"],"names":[],"mappings":";;;AACA,8DAA0D;AAC1D,wDAA+D;AAC/D,6BAAwB;AACxB,oEAAgE;AAChE,kEAA8D;AAC9D,0EAAsF;AACtF,mDAAgD;AAChD,+CAA4C;AAC5C,iDAA8C;AAC9C,iDAAqD;AACrD,yCAAiE;AAEjE,MAAM,YAAY,GAAG,IAAI,gCAAc,CAAC,EAAE,CAAC,CAAC;AAC5C,MAAM,QAAQ,GAAG,qCAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC3D,MAAM,cAAc,GAAG,IAAI,gCAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW,CAAC,CAAC;AAE7E,MAAM,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;IAChC,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;CAC7B,CAAC,CAAC;AAEH,MAAM,iBAAiB,GAAG,KAAK,EAAE,KAA2B,EAAE,OAAgB,EAAE,EAAE;IAChF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,6BAA6B;IAC7B,MAAM,KAAK,GAAG,IAAA,gCAAY,EAAC,KAAK,CAAC,CAAC;IAClC,MAAM,IAAI,GAAG,MAAM,wBAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACjD,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAgB,CAAC,EAAE,KAAK,CAAC;IAE5F,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,2BAAkB,CAAC,uBAAuB,CAAC,CAAC;IACxD,CAAC;IAED,2BAA2B;IAC3B,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,sCAAkB,EAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;IAElE,eAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE;QAC7B,UAAU;QACV,SAAS;KACV,CAAC,CAAC;IAEH,cAAc;IACd,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAE3D,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,sBAAa,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,iBAAiB;IACjB,eAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,UAAU,EAAE,OAAO,CAAC,EAAE,EAAE;QACvD,MAAM,EAAE,MAAM;KACf,CAAC,CAAC;IAEH,gBAAgB;IAChB,iBAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC9B,iBAAO,CAAC,QAAQ,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;IAClD,iBAAO,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAEjD,OAAO,mBAAQ,CAAC,OAAO,CAAC;QACtB,OAAO;KACR,CAAC,CAAC;AACL,CAAC,CAAC;AAEW,QAAA,OAAO,GAAG,IAAA,4BAAY,EAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';\nimport { z } from 'zod';\nimport { PatientService } from '../../services/patient.service';\nimport { errorHandler } from '../../middleware/error-handler';\nimport { validatePathParams, getAuthToken } from '../../middleware/request-validator';\nimport { response } from '../../utils/response';\nimport { logger } from '../../utils/logger';\nimport { metrics } from '../../utils/metrics';\nimport { cognitoService } from '../../utils/cognito';\nimport { NotFoundError, AuthorizationError } from '../../errors';\n\nconst dynamoClient = new DynamoDBClient({});\nconst dynamodb = DynamoDBDocumentClient.from(dynamoClient);\nconst patientService = new PatientService(dynamodb, process.env.TABLE_NAME!);\n\nconst PathParamsSchema = z.object({\n  patientId: z.string().uuid(),\n});\n\nconst getPatientHandler = async (event: APIGatewayProxyEvent, context: Context) => {\n  const startTime = Date.now();\n  \n  // Get provider ID from token\n  const token = getAuthToken(event);\n  const user = await cognitoService.getUser(token);\n  const providerId = user.UserAttributes?.find(attr => attr.Name === 'custom:user_id')?.Value;\n  \n  if (!providerId) {\n    throw new AuthorizationError('Provider ID not found');\n  }\n\n  // Validate path parameters\n  const { patientId } = validatePathParams(event, PathParamsSchema);\n\n  logger.info('Getting patient', {\n    providerId,\n    patientId,\n  });\n\n  // Get patient\n  const patient = await patientService.getPatient(patientId);\n  \n  if (!patient) {\n    throw new NotFoundError('Patient');\n  }\n\n  // Log PHI access\n  logger.audit('PATIENT_ACCESSED', providerId, patient.id, {\n    action: 'READ',\n  });\n\n  // Track metrics\n  metrics.success('GetPatient');\n  metrics.duration('GetPatientDuration', startTime);\n  metrics.phiAccess(providerId, 'Patient', 'Read');\n\n  return response.success({\n    patient,\n  });\n};\n\nexport const handler = errorHandler(getPatientHandler);"]}
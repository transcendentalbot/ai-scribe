{"version":3,"file":"create-patient.js","sourceRoot":"","sources":["../../../src/handlers/patients/create-patient.ts"],"names":[],"mappings":";;;AACA,8DAA0D;AAC1D,wDAA+D;AAC/D,iDAA0D;AAC1D,oEAAgE;AAChE,kEAA8D;AAC9D,0EAAgF;AAChF,mDAAgD;AAChD,+CAA4C;AAC5C,iDAA8C;AAC9C,iDAAqD;AACrD,yCAAkD;AAElD,MAAM,YAAY,GAAG,IAAI,gCAAc,CAAC,EAAE,CAAC,CAAC;AAC5C,MAAM,QAAQ,GAAG,qCAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC3D,MAAM,cAAc,GAAG,IAAI,gCAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW,CAAC,CAAC;AAE7E,MAAM,oBAAoB,GAAG,KAAK,EAAE,KAA2B,EAAE,OAAgB,EAAE,EAAE;IACnF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,6BAA6B;IAC7B,MAAM,KAAK,GAAG,IAAA,gCAAY,EAAC,KAAK,CAAC,CAAC;IAClC,MAAM,IAAI,GAAG,MAAM,wBAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACjD,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAgB,CAAC,EAAE,KAAK,CAAC;IAE5F,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,2BAAkB,CAAC,uBAAuB,CAAC,CAAC;IACxD,CAAC;IAED,wBAAwB;IACxB,MAAM,WAAW,GAAG,IAAA,gCAAY,EAAC,KAAK,EAAE,6BAAmB,CAAC,CAAC;IAE7D,eAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE;QAC9B,UAAU;QACV,GAAG,EAAE,WAAW,CAAC,GAAG;KACrB,CAAC,CAAC;IAEH,iBAAiB;IACjB,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAE5E,iBAAiB;IACjB,eAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,EAAE,EAAE;QACtD,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,MAAM,EAAE,QAAQ;KACjB,CAAC,CAAC;IAEH,gBAAgB;IAChB,iBAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IACjC,iBAAO,CAAC,QAAQ,CAAC,uBAAuB,EAAE,SAAS,CAAC,CAAC;IACrD,iBAAO,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;IAEnD,OAAO,mBAAQ,CAAC,OAAO,CAAC;QACtB,OAAO;KACR,EAAE,GAAG,CAAC,CAAC;AACV,CAAC,CAAC;AAEW,QAAA,OAAO,GAAG,IAAA,4BAAY,EAAC,oBAAoB,CAAC,CAAC","sourcesContent":["import { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';\nimport { CreatePatientSchema } from '../../types/patient';\nimport { PatientService } from '../../services/patient.service';\nimport { errorHandler } from '../../middleware/error-handler';\nimport { validateBody, getAuthToken } from '../../middleware/request-validator';\nimport { response } from '../../utils/response';\nimport { logger } from '../../utils/logger';\nimport { metrics } from '../../utils/metrics';\nimport { cognitoService } from '../../utils/cognito';\nimport { AuthorizationError } from '../../errors';\n\nconst dynamoClient = new DynamoDBClient({});\nconst dynamodb = DynamoDBDocumentClient.from(dynamoClient);\nconst patientService = new PatientService(dynamodb, process.env.TABLE_NAME!);\n\nconst createPatientHandler = async (event: APIGatewayProxyEvent, context: Context) => {\n  const startTime = Date.now();\n  \n  // Get provider ID from token\n  const token = getAuthToken(event);\n  const user = await cognitoService.getUser(token);\n  const providerId = user.UserAttributes?.find(attr => attr.Name === 'custom:user_id')?.Value;\n  \n  if (!providerId) {\n    throw new AuthorizationError('Provider ID not found');\n  }\n\n  // Validate request body\n  const patientData = validateBody(event, CreatePatientSchema);\n\n  logger.info('Creating patient', {\n    providerId,\n    mrn: patientData.mrn,\n  });\n\n  // Create patient\n  const patient = await patientService.createPatient(patientData, providerId);\n\n  // Log PHI access\n  logger.audit('PATIENT_CREATED', providerId, patient.id, {\n    mrn: patient.mrn,\n    action: 'CREATE',\n  });\n\n  // Track metrics\n  metrics.success('CreatePatient');\n  metrics.duration('CreatePatientDuration', startTime);\n  metrics.phiAccess(providerId, 'Patient', 'Create');\n\n  return response.success({\n    patient,\n  }, 201);\n};\n\nexport const handler = errorHandler(createPatientHandler);"]}
{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../src/types/auth.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AAEX,QAAA,cAAc,GAAG,OAAC,CAAC,MAAM,CAAC;IACrC,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;IACzB,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAC/B,iEAAiE,EACjE,0EAA0E,CAC3E;IACD,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAClC,mCAAmC;IACnC,aAAa,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACpC,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAChC,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACpC,CAAC,CAAC;AAEU,QAAA,WAAW,GAAG,OAAC,CAAC,MAAM,CAAC;IAClC,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;IACzB,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE;CACrB,CAAC,CAAC;AAEU,QAAA,oBAAoB,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3C,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;CAC1B,CAAC,CAAC;AAEU,QAAA,2BAA2B,GAAG,OAAC,CAAC,MAAM,CAAC;IAClD,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;IACzB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAClC,iEAAiE,EACjE,0EAA0E,CAC3E;CACF,CAAC,CAAC;AAEU,QAAA,kBAAkB,GAAG,OAAC,CAAC,MAAM,CAAC;IACzC,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE;CACzB,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\nexport const RegisterSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8).regex(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n    'Password must contain uppercase, lowercase, number and special character'\n  ),\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  phoneNumber: z.string().optional(),\n  // Medical provider specific fields\n  licenseNumber: z.string().optional(),\n  specialty: z.string().optional(),\n  organization: z.string().optional(),\n});\n\nexport const LoginSchema = z.object({\n  email: z.string().email(),\n  password: z.string(),\n});\n\nexport const ForgotPasswordSchema = z.object({\n  email: z.string().email(),\n});\n\nexport const ConfirmForgotPasswordSchema = z.object({\n  email: z.string().email(),\n  code: z.string(),\n  newPassword: z.string().min(8).regex(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n    'Password must contain uppercase, lowercase, number and special character'\n  ),\n});\n\nexport const RefreshTokenSchema = z.object({\n  refreshToken: z.string(),\n});\n\nexport type RegisterInput = z.infer<typeof RegisterSchema>;\nexport type LoginInput = z.infer<typeof LoginSchema>;\nexport type ForgotPasswordInput = z.infer<typeof ForgotPasswordSchema>;\nexport type ConfirmForgotPasswordInput = z.infer<typeof ConfirmForgotPasswordSchema>;\nexport type RefreshTokenInput = z.infer<typeof RefreshTokenSchema>;\n\nexport interface AuthResponse {\n  user: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    phoneNumber?: string;\n    licenseNumber?: string;\n    specialty?: string;\n    organization?: string;\n  };\n  tokens: {\n    accessToken: string;\n    refreshToken: string;\n    idToken: string;\n  };\n}\n\nexport interface User {\n  pk: string; // USER#<userId>\n  sk: string; // PROFILE\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  phoneNumber?: string;\n  licenseNumber?: string;\n  specialty?: string;\n  organization?: string;\n  createdAt: string;\n  updatedAt: string;\n  lastLoginAt?: string;\n  emailVerified: boolean;\n  mfaEnabled: boolean;\n}"]}
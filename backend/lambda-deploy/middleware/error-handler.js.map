{"version":3,"file":"error-handler.js","sourceRoot":"","sources":["../../src/middleware/error-handler.ts"],"names":[],"mappings":"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","sourcesContent":["import { APIGatewayProxyEvent, APIGatewayProxyResult, Context } from 'aws-lambda';\nimport { ZodError } from 'zod';\nimport { AppError, response } from '../utils/response';\nimport { logger } from '../utils/logger';\n\nexport interface HandlerFunction {\n  (event: APIGatewayProxyEvent, context: Context): Promise<APIGatewayProxyResult>;\n}\n\n/**\n * Error handling middleware for Lambda functions\n * Wraps handlers to provide consistent error handling and logging\n */\nexport const errorHandler = (handler: HandlerFunction): HandlerFunction => {\n  return async (event: APIGatewayProxyEvent, context: Context): Promise<APIGatewayProxyResult> => {\n    const requestId = context.awsRequestId;\n    const startTime = Date.now();\n\n    try {\n      // Log request\n      logger.info('Request received', {\n        requestId,\n        method: event.httpMethod,\n        path: event.path,\n        headers: event.headers,\n        queryParams: event.queryStringParameters,\n      });\n\n      // Execute handler\n      const result = await handler(event, context);\n\n      // Log response\n      const duration = Date.now() - startTime;\n      logger.info('Request completed', {\n        requestId,\n        statusCode: result.statusCode,\n        duration,\n      });\n\n      return result;\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n\n      // Log error with context\n      logger.error('Request failed', {\n        requestId,\n        error: {\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n        },\n        duration,\n      });\n\n      // Handle different error types\n      if (error instanceof ZodError) {\n        return response.error('Validation failed', 400, error.errors);\n      }\n\n      if (error instanceof AppError) {\n        return response.error(error.message, error.statusCode, error.errors);\n      }\n\n      // AWS SDK errors\n      if (error.name && error.$metadata) {\n        const awsError = mapAwsError(error);\n        return response.error(awsError.message, awsError.statusCode);\n      }\n\n      // Unknown errors - don't expose internal details\n      return response.error('Internal server error', 500);\n    }\n  };\n};\n\n/**\n * Maps AWS SDK errors to appropriate HTTP responses\n */\nfunction mapAwsError(error: any): { message: string; statusCode: number } {\n  const errorMappings: Record<string, { message: string; statusCode: number }> = {\n    // Cognito errors\n    NotAuthorizedException: { message: 'Invalid credentials', statusCode: 401 },\n    UserNotFoundException: { message: 'User not found', statusCode: 404 },\n    UsernameExistsException: { message: 'User already exists', statusCode: 409 },\n    InvalidPasswordException: { message: 'Password does not meet requirements', statusCode: 400 },\n    CodeMismatchException: { message: 'Invalid verification code', statusCode: 400 },\n    ExpiredCodeException: { message: 'Verification code has expired', statusCode: 400 },\n    TooManyRequestsException: { message: 'Too many requests, please try again later', statusCode: 429 },\n    LimitExceededException: { message: 'Request limit exceeded', statusCode: 429 },\n    UserNotConfirmedException: { message: 'Please verify your email before logging in', statusCode: 403 },\n    \n    // DynamoDB errors\n    ConditionalCheckFailedException: { message: 'Operation failed due to a conflict', statusCode: 409 },\n    ResourceNotFoundException: { message: 'Resource not found', statusCode: 404 },\n    ValidationException: { message: 'Invalid request', statusCode: 400 },\n    \n    // S3 errors\n    NoSuchKey: { message: 'File not found', statusCode: 404 },\n    AccessDenied: { message: 'Access denied', statusCode: 403 },\n    \n    // Lambda errors\n    ResourceConflictException: { message: 'Resource conflict', statusCode: 409 },\n    ServiceException: { message: 'Service temporarily unavailable', statusCode: 503 },\n  };\n\n  const mapping = errorMappings[error.name];\n  if (mapping) {\n    return mapping;\n  }\n\n  // Default mapping based on error name patterns\n  if (error.name.includes('NotFound')) {\n    return { message: 'Resource not found', statusCode: 404 };\n  }\n  if (error.name.includes('Unauthorized') || error.name.includes('Forbidden')) {\n    return { message: 'Unauthorized', statusCode: 401 };\n  }\n  if (error.name.includes('Invalid') || error.name.includes('Validation')) {\n    return { message: 'Invalid request', statusCode: 400 };\n  }\n\n  return { message: 'An error occurred', statusCode: 500 };\n}"]}
{"version":3,"file":"cognito.js","sourceRoot":"","sources":["../../src/utils/cognito.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CognitoIdentityProviderClient,\n  SignUpCommand,\n  InitiateAuthCommand,\n  ConfirmSignUpCommand,\n  ForgotPasswordCommand,\n  ConfirmForgotPasswordCommand,\n  GetUserCommand,\n  GlobalSignOutCommand,\n  AdminUpdateUserAttributesCommand,\n} from '@aws-sdk/client-cognito-identity-provider';\n\nconst cognito = new CognitoIdentityProviderClient({\n  region: process.env.AWS_REGION || 'us-east-1',\n});\n\nconst CLIENT_ID = process.env.USER_POOL_CLIENT_ID!;\nconst USER_POOL_ID = process.env.USER_POOL_ID!;\n\nexport const cognitoService = {\n  async signUp(email: string, password: string, attributes: Record<string, string>) {\n    const command = new SignUpCommand({\n      ClientId: CLIENT_ID,\n      Username: email,\n      Password: password,\n      UserAttributes: Object.entries(attributes).map(([Name, Value]) => ({\n        Name,\n        Value,\n      })),\n    });\n\n    return cognito.send(command);\n  },\n\n  async confirmSignUp(email: string, code: string) {\n    const command = new ConfirmSignUpCommand({\n      ClientId: CLIENT_ID,\n      Username: email,\n      ConfirmationCode: code,\n    });\n\n    return cognito.send(command);\n  },\n\n  async signIn(email: string, password: string) {\n    const command = new InitiateAuthCommand({\n      ClientId: CLIENT_ID,\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      AuthParameters: {\n        USERNAME: email,\n        PASSWORD: password,\n      },\n    });\n\n    return cognito.send(command);\n  },\n\n  async refreshToken(refreshToken: string) {\n    const command = new InitiateAuthCommand({\n      ClientId: CLIENT_ID,\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: {\n        REFRESH_TOKEN: refreshToken,\n      },\n    });\n\n    return cognito.send(command);\n  },\n\n  async forgotPassword(email: string) {\n    const command = new ForgotPasswordCommand({\n      ClientId: CLIENT_ID,\n      Username: email,\n    });\n\n    return cognito.send(command);\n  },\n\n  async confirmForgotPassword(email: string, code: string, newPassword: string) {\n    const command = new ConfirmForgotPasswordCommand({\n      ClientId: CLIENT_ID,\n      Username: email,\n      ConfirmationCode: code,\n      Password: newPassword,\n    });\n\n    return cognito.send(command);\n  },\n\n  async getUser(accessToken: string) {\n    const command = new GetUserCommand({\n      AccessToken: accessToken,\n    });\n\n    return cognito.send(command);\n  },\n\n  async signOut(accessToken: string) {\n    const command = new GlobalSignOutCommand({\n      AccessToken: accessToken,\n    });\n\n    return cognito.send(command);\n  },\n\n  async updateUserAttributes(username: string, attributes: Record<string, string>) {\n    const command = new AdminUpdateUserAttributesCommand({\n      UserPoolId: USER_POOL_ID,\n      Username: username,\n      UserAttributes: Object.entries(attributes).map(([Name, Value]) => ({\n        Name,\n        Value,\n      })),\n    });\n\n    return cognito.send(command);\n  },\n};"]}
{"version":3,"file":"audio.service.fixed.js","sourceRoot":"","sources":["../../src/services/audio.service.fixed.ts"],"names":[],"mappings":"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","sourcesContent":["import { S3Client, PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient, PutCommand, UpdateCommand, GetCommand, DeleteCommand } from '@aws-sdk/lib-dynamodb';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst s3Client = new S3Client({});\nconst dynamoClient = new DynamoDBClient({});\nconst docClient = DynamoDBDocumentClient.from(dynamoClient);\n\ninterface RecordingSession {\n  sessionId: string;\n  connectionId: string;\n  encounterId: string;\n  startTime: string;\n  uploadId?: string;\n  parts: Array<{ ETag: string; PartNumber: number }>;\n  s3Key: string;\n  isPaused: boolean;\n  totalDuration: number;\n  lastSequenceNumber: number;\n  // Remove chunkBuffer - we'll upload chunks immediately\n}\n\nclass AudioService {\n  private readonly bucketName = process.env.AUDIO_BUCKET_NAME!;\n  private readonly tableName = process.env.TABLE_NAME!;\n  private readonly connectionsTable = process.env.CONNECTIONS_TABLE_NAME!;\n\n  // Store session in DynamoDB instead of memory\n  private async storeSession(session: RecordingSession) {\n    await docClient.send(\n      new PutCommand({\n        TableName: this.connectionsTable,\n        Item: {\n          pk: `SESSION#${session.sessionId}`,\n          sk: 'METADATA',\n          ...session,\n          ttl: Math.floor(Date.now() / 1000) + 3600, // 1 hour TTL\n        },\n      })\n    );\n  }\n\n  // Get session from DynamoDB\n  private async getSession(sessionId: string): Promise<RecordingSession | null> {\n    const result = await docClient.send(\n      new GetCommand({\n        TableName: this.connectionsTable,\n        Key: {\n          pk: `SESSION#${sessionId}`,\n          sk: 'METADATA',\n        },\n      })\n    );\n    \n    if (!result.Item) return null;\n    \n    // Remove DynamoDB-specific fields\n    const { pk, sk, ttl, ...session } = result.Item;\n    return session as RecordingSession;\n  }\n\n  // Update session in DynamoDB\n  private async updateSession(sessionId: string, updates: Partial<RecordingSession>) {\n    const updateExpression = Object.keys(updates)\n      .map((key, index) => `#field${index} = :value${index}`)\n      .join(', ');\n    \n    const expressionAttributeNames = Object.keys(updates).reduce((acc, key, index) => ({\n      ...acc,\n      [`#field${index}`]: key,\n    }), {});\n    \n    const expressionAttributeValues = Object.entries(updates).reduce((acc, [_, value], index) => ({\n      ...acc,\n      [`:value${index}`]: value,\n    }), {});\n\n    await docClient.send(\n      new UpdateCommand({\n        TableName: this.connectionsTable,\n        Key: {\n          pk: `SESSION#${sessionId}`,\n          sk: 'METADATA',\n        },\n        UpdateExpression: `SET ${updateExpression}`,\n        ExpressionAttributeNames: expressionAttributeNames,\n        ExpressionAttributeValues: expressionAttributeValues,\n      })\n    );\n  }\n\n  // Delete session from DynamoDB\n  private async deleteSession(sessionId: string) {\n    await docClient.send(\n      new DeleteCommand({\n        TableName: this.connectionsTable,\n        Key: {\n          pk: `SESSION#${sessionId}`,\n          sk: 'METADATA',\n        },\n      })\n    );\n  }\n\n  async startRecording({\n    connectionId,\n    encounterId,\n    metadata,\n  }: {\n    connectionId: string;\n    encounterId: string;\n    metadata?: any;\n  }) {\n    const sessionId = uuidv4();\n    const timestamp = new Date().toISOString();\n    const s3Key = `recordings/${encounterId}/${sessionId}/audio.webm`;\n\n    console.log(`[AudioService] Starting recording - sessionId: ${sessionId}, connectionId: ${connectionId}`);\n\n    // Initialize multipart upload\n    const multipartUpload = await s3Client.send(\n      new CreateMultipartUploadCommand({\n        Bucket: this.bucketName,\n        Key: s3Key,\n        ContentType: 'audio/webm',\n        Metadata: {\n          encounterId,\n          sessionId,\n          connectionId,\n          startTime: timestamp,\n          ...(metadata ? Object.entries(metadata).reduce((acc, [key, value]) => ({\n            ...acc,\n            [key]: String(value)\n          }), {}) : {}),\n        },\n        ServerSideEncryption: 'aws:kms',\n      })\n    );\n\n    // Create session\n    const session: RecordingSession = {\n      sessionId,\n      connectionId,\n      encounterId,\n      startTime: timestamp,\n      uploadId: multipartUpload.UploadId,\n      parts: [],\n      s3Key,\n      isPaused: false,\n      totalDuration: 0,\n      lastSequenceNumber: -1,\n    };\n\n    // Store in DynamoDB\n    await this.storeSession(session);\n    console.log(`[AudioService] Session stored in DynamoDB`);\n\n    // Generate pre-signed URL for direct uploads (optional)\n    const uploadUrl = await getSignedUrl(\n      s3Client,\n      new PutObjectCommand({\n        Bucket: this.bucketName,\n        Key: `${s3Key}.chunks/${sessionId}-chunk-`,\n      }),\n      { expiresIn: 3600 }\n    );\n\n    return {\n      sessionId,\n      uploadUrl,\n      s3Key,\n    };\n  }\n\n  async processAudioChunk({\n    connectionId,\n    sessionId,\n    chunk,\n    sequenceNumber,\n  }: {\n    connectionId: string;\n    sessionId: string;\n    chunk: string; // base64 encoded\n    sequenceNumber: number;\n  }) {\n    console.log(`[AudioService] Processing chunk - sessionId: ${sessionId}, seq: ${sequenceNumber}, connectionId: ${connectionId}`);\n    \n    // Get session from DynamoDB\n    const session = await this.getSession(sessionId);\n    \n    if (!session) {\n      console.error(`[AudioService] Session not found: ${sessionId}`);\n      throw new Error(`Session not found: ${sessionId}`);\n    }\n    \n    if (session.connectionId !== connectionId) {\n      console.error(`[AudioService] Connection mismatch - expected: ${session.connectionId}, got: ${connectionId}`);\n      throw new Error('Invalid session - connection mismatch');\n    }\n\n    if (session.isPaused) {\n      return { status: 'paused' };\n    }\n\n    // Validate sequence\n    if (sequenceNumber !== session.lastSequenceNumber + 1) {\n      console.warn('Out of sequence chunk received', {\n        expected: session.lastSequenceNumber + 1,\n        received: sequenceNumber,\n      });\n    }\n\n    // Convert base64 to buffer\n    const buffer = Buffer.from(chunk, 'base64');\n    \n    // Upload chunk immediately as a part\n    const partNumber = session.parts.length + 1;\n    console.log(`[AudioService] Uploading part ${partNumber}, size: ${buffer.length} bytes`);\n\n    const uploadPartResult = await s3Client.send(\n      new UploadPartCommand({\n        Bucket: this.bucketName,\n        Key: session.s3Key,\n        UploadId: session.uploadId,\n        PartNumber: partNumber,\n        Body: buffer,\n      })\n    );\n\n    console.log(`[AudioService] Part ${partNumber} uploaded successfully, ETag: ${uploadPartResult.ETag}`);\n\n    // Update session with new part and sequence number\n    const updatedParts = [...session.parts, {\n      ETag: uploadPartResult.ETag!,\n      PartNumber: partNumber,\n    }];\n    \n    await this.updateSession(sessionId, {\n      parts: updatedParts,\n      lastSequenceNumber: sequenceNumber,\n    });\n\n    return { status: 'processed', sequenceNumber };\n  }\n\n  async stopRecording({\n    connectionId,\n    sessionId,\n  }: {\n    connectionId: string;\n    sessionId: string;\n  }) {\n    console.log(`[AudioService] Stopping recording for session: ${sessionId}`);\n    \n    // Get session from DynamoDB\n    const session = await this.getSession(sessionId);\n    \n    if (!session) {\n      console.error(`[AudioService] Session not found: ${sessionId}`);\n      throw new Error(`Session not found: ${sessionId}`);\n    }\n    \n    if (session.connectionId !== connectionId) {\n      console.error(`[AudioService] Connection mismatch. Expected: ${session.connectionId}, Got: ${connectionId}`);\n      throw new Error('Invalid session - connection mismatch');\n    }\n\n    console.log(`[AudioService] Session found. Parts uploaded: ${session.parts.length}`);\n\n    // Only complete multipart upload if we have parts\n    if (session.parts.length === 0) {\n      console.warn(`[AudioService] No parts uploaded for session ${sessionId}`);\n      // Clean up the multipart upload\n      await this.deleteSession(sessionId);\n      throw new Error('No audio data was recorded');\n    }\n\n    console.log(`[AudioService] Completing multipart upload with ${session.parts.length} parts`);\n    // Complete multipart upload\n    await s3Client.send(\n      new CompleteMultipartUploadCommand({\n        Bucket: this.bucketName,\n        Key: session.s3Key,\n        UploadId: session.uploadId,\n        MultipartUpload: {\n          Parts: session.parts,\n        },\n      })\n    );\n\n    // Calculate duration\n    const endTime = new Date();\n    const startTime = new Date(session.startTime);\n    const duration = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);\n\n    // Create recording record\n    const recordingId = uuidv4();\n    await docClient.send(\n      new UpdateCommand({\n        TableName: this.tableName,\n        Key: {\n          pk: `ENCOUNTER#${session.encounterId}`,\n          sk: 'METADATA',\n        },\n        UpdateExpression: 'SET recordings = list_append(if_not_exists(recordings, :empty), :recording)',\n        ExpressionAttributeValues: {\n          ':empty': [],\n          ':recording': [{\n            id: recordingId,\n            startTime: session.startTime,\n            endTime: endTime.toISOString(),\n            duration,\n            s3Key: session.s3Key,\n            transcriptionId: null,\n          }],\n        },\n      })\n    );\n\n    // Clean up session from DynamoDB\n    await this.deleteSession(sessionId);\n\n    return {\n      recordingId,\n      duration,\n      s3Key: session.s3Key,\n    };\n  }\n\n  async updateRecordingStatus({\n    connectionId,\n    sessionId,\n    isPaused,\n  }: {\n    connectionId: string;\n    sessionId: string;\n    isPaused: boolean;\n  }) {\n    const session = await this.getSession(sessionId);\n    \n    if (!session || session.connectionId !== connectionId) {\n      throw new Error('Invalid session');\n    }\n\n    await this.updateSession(sessionId, { isPaused });\n    return { status: isPaused ? 'paused' : 'resumed' };\n  }\n}\n\nexport const audioService = new AudioService();"]}